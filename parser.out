Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APOST
    COMMENT
    COMMENTBLOCK
    EOF

Grammar

Rule 0     S' -> program
Rule 1     program -> function program
Rule 2     program -> external-declaration program
Rule 3     program -> empty
Rule 4     external-declaration -> type assignment SEMICOLON
Rule 5     external-declaration -> array_usage SEMICOLON
Rule 6     external-declaration -> type array_usage SEMICOLON
Rule 7     external-declaration -> macro_definition
Rule 8     external-declaration -> file_inclusion
Rule 9     declaration -> type assignment SEMICOLON
Rule 10    declaration -> assignment SEMICOLON
Rule 11    declaration -> function_call SEMICOLON
Rule 12    declaration -> array_usage SEMICOLON
Rule 13    declaration -> type array_usage SEMICOLON
Rule 14    assignment -> IDENTIFIER EQUALS expression
Rule 15    assignment -> IDENTIFIER PLUS EQUALS expression
Rule 16    assignment -> IDENTIFIER MINUS EQUALS expression
Rule 17    function_call -> IDENTIFIER LPAREN RPAREN
Rule 18    function_call -> IDENTIFIER LPAREN expression RPAREN
Rule 19    function_call -> IDENTIFIER LPAREN elements RPAREN
Rule 20    elements -> COMMA expression
Rule 21    elements -> COMMA expression elements
Rule 22    number -> INTEGER
Rule 23    number -> FLOATINGPOINT
Rule 24    array_usage -> IDENTIFIER LBRACKET elements RBRACKET
Rule 25    array_usage -> IDENTIFIER LBRACKET expression RBRACKET
Rule 26    function -> type IDENTIFIER LPAREN argument_list_option RPAREN compound_statement
Rule 27    argument_list_option -> argument_list
Rule 28    argument_list_option -> empty
Rule 29    argument_list -> argument_list COMMA argument
Rule 30    argument_list -> argument
Rule 31    argument -> type IDENTIFIER
Rule 32    compound_statement -> LBRACE statement_list RBRACE
Rule 33    statement_list -> statement_list statement
Rule 34    statement_list -> empty
Rule 35    statement -> iteration_statement
Rule 36    statement -> declaration
Rule 37    statement -> selection_statement
Rule 38    statement -> return-statement
Rule 39    iteration_statement -> WHILE LPAREN expression RPAREN compound_statement
Rule 40    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 41    iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 42    iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 43    selection_statement -> IF LPAREN expression RPAREN compound_statement
Rule 44    selection_statement -> IF LPAREN expression RPAREN statement
Rule 45    selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement
Rule 46    selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE statement
Rule 47    selection_statement -> IF LPAREN expression RPAREN statement ELSE compound_statement
Rule 48    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 49    return-statement -> RETURN SEMICOLON
Rule 50    return-statement -> RETURN expression SEMICOLON
Rule 51    conditional_expression -> expression ISEQUAL expression
Rule 52    conditional_expression -> expression NOT EQUALS expression
Rule 53    conditional_expression -> expression LESS expression
Rule 54    conditional_expression -> expression LESS EQUALS expression
Rule 55    conditional_expression -> expression GREATER expression
Rule 56    conditional_expression -> expression GREATER EQUALS expression
Rule 57    conditional_expression -> expression AND expression
Rule 58    conditional_expression -> expression OR expression
Rule 59    conditional_expression -> NOT expression
Rule 60    expression -> BOOLEAN
Rule 61    expression -> number
Rule 62    expression -> STRING
Rule 63    expression -> IDENTIFIER
Rule 64    expression -> LETTER
Rule 65    expression -> assignment
Rule 66    expression -> array_usage
Rule 67    expression -> function_call
Rule 68    expression -> math_expression
Rule 69    expression -> conditional_expression
Rule 70    type -> BOOL
Rule 71    type -> INT
Rule 72    type -> FLOAT
Rule 73    type -> CHAR
Rule 74    type -> VOID
Rule 75    math_expression -> expression PLUS expression
Rule 76    math_expression -> expression MINUS expression
Rule 77    math_expression -> expression TIMES expression
Rule 78    math_expression -> expression DIVIDE expression
Rule 79    math_expression -> expression MODULUS expression
Rule 80    math_expression -> expression PLUS PLUS
Rule 81    math_expression -> expression MINUS MINUS
Rule 82    macro_definition -> POUND DEFINE IDENTIFIER assignment
Rule 83    file_inclusion -> POUND INCLUDE LESS HEADER GREATER
Rule 84    file_inclusion -> POUND INCLUDE QUOTE HEADER QUOTE
Rule 85    empty -> <empty>

Terminals, with rules where they appear

AND                  : 57
APOST                : 
BOOL                 : 70
BOOLEAN              : 60
CHAR                 : 73
COMMA                : 20 21 29
COMMENT              : 
COMMENTBLOCK         : 
DEFINE               : 82
DIVIDE               : 78
DO                   : 41 42
ELSE                 : 45 46 47 48
EOF                  : 
EQUALS               : 14 15 16 52 54 56
FLOAT                : 72
FLOATINGPOINT        : 23
GREATER              : 55 56 83
HEADER               : 83 84
IDENTIFIER           : 14 15 16 17 18 19 24 25 26 31 63 82
IF                   : 43 44 45 46 47 48
INCLUDE              : 83 84
INT                  : 71
INTEGER              : 22
ISEQUAL              : 51
LBRACE               : 32
LBRACKET             : 24 25
LESS                 : 53 54 83
LETTER               : 64
LPAREN               : 17 18 19 26 39 40 41 42 43 44 45 46 47 48
MINUS                : 16 76 81 81
MODULUS              : 79
NOT                  : 52 59
OR                   : 58
PLUS                 : 15 75 80 80
POUND                : 82 83 84
QUOTE                : 84 84
RBRACE               : 32
RBRACKET             : 24 25
RETURN               : 49 50
RPAREN               : 17 18 19 26 39 40 41 42 43 44 45 46 47 48
SEMICOLON            : 4 5 6 9 10 11 12 13 41 42 49 50
STRING               : 62
TIMES                : 77
VOID                 : 74
WHILE                : 39 40 41 42
error                : 

Nonterminals, with rules where they appear

argument             : 29 30
argument_list        : 27 29
argument_list_option : 26
array_usage          : 5 6 12 13 66
assignment           : 4 9 10 65 82
compound_statement   : 26 39 41 43 45 45 46 47
conditional_expression : 69
declaration          : 36
elements             : 19 21 24
empty                : 3 28 34
expression           : 14 15 16 18 20 21 25 39 40 41 42 43 44 45 46 47 48 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 75 75 76 76 77 77 78 78 79 79 80 81
external-declaration : 2
file_inclusion       : 8
function             : 1
function_call        : 11 67
iteration_statement  : 35
macro_definition     : 7
math_expression      : 68
number               : 61
program              : 1 2 0
return-statement     : 38
selection_statement  : 37
statement            : 33 40 42 44 46 47 48 48
statement_list       : 32 33
type                 : 4 6 9 13 26 31

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . function program
    (2) program -> . external-declaration program
    (3) program -> . empty
    (26) function -> . type IDENTIFIER LPAREN argument_list_option RPAREN compound_statement
    (4) external-declaration -> . type assignment SEMICOLON
    (5) external-declaration -> . array_usage SEMICOLON
    (6) external-declaration -> . type array_usage SEMICOLON
    (7) external-declaration -> . macro_definition
    (8) external-declaration -> . file_inclusion
    (85) empty -> .
    (70) type -> . BOOL
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . VOID
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (82) macro_definition -> . POUND DEFINE IDENTIFIER assignment
    (83) file_inclusion -> . POUND INCLUDE LESS HEADER GREATER
    (84) file_inclusion -> . POUND INCLUDE QUOTE HEADER QUOTE

    $end            reduce using rule 85 (empty -> .)
    BOOL            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    VOID            shift and go to state 14
    IDENTIFIER      shift and go to state 6
    POUND           shift and go to state 15

    program                        shift and go to state 1
    function                       shift and go to state 2
    external-declaration           shift and go to state 3
    empty                          shift and go to state 4
    type                           shift and go to state 5
    array_usage                    shift and go to state 7
    macro_definition               shift and go to state 8
    file_inclusion                 shift and go to state 9

state 1

    (0) S' -> program .



state 2

    (1) program -> function . program
    (1) program -> . function program
    (2) program -> . external-declaration program
    (3) program -> . empty
    (26) function -> . type IDENTIFIER LPAREN argument_list_option RPAREN compound_statement
    (4) external-declaration -> . type assignment SEMICOLON
    (5) external-declaration -> . array_usage SEMICOLON
    (6) external-declaration -> . type array_usage SEMICOLON
    (7) external-declaration -> . macro_definition
    (8) external-declaration -> . file_inclusion
    (85) empty -> .
    (70) type -> . BOOL
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . VOID
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (82) macro_definition -> . POUND DEFINE IDENTIFIER assignment
    (83) file_inclusion -> . POUND INCLUDE LESS HEADER GREATER
    (84) file_inclusion -> . POUND INCLUDE QUOTE HEADER QUOTE

    $end            reduce using rule 85 (empty -> .)
    BOOL            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    VOID            shift and go to state 14
    IDENTIFIER      shift and go to state 6
    POUND           shift and go to state 15

    function                       shift and go to state 2
    program                        shift and go to state 16
    external-declaration           shift and go to state 3
    empty                          shift and go to state 4
    type                           shift and go to state 5
    array_usage                    shift and go to state 7
    macro_definition               shift and go to state 8
    file_inclusion                 shift and go to state 9

state 3

    (2) program -> external-declaration . program
    (1) program -> . function program
    (2) program -> . external-declaration program
    (3) program -> . empty
    (26) function -> . type IDENTIFIER LPAREN argument_list_option RPAREN compound_statement
    (4) external-declaration -> . type assignment SEMICOLON
    (5) external-declaration -> . array_usage SEMICOLON
    (6) external-declaration -> . type array_usage SEMICOLON
    (7) external-declaration -> . macro_definition
    (8) external-declaration -> . file_inclusion
    (85) empty -> .
    (70) type -> . BOOL
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . VOID
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (82) macro_definition -> . POUND DEFINE IDENTIFIER assignment
    (83) file_inclusion -> . POUND INCLUDE LESS HEADER GREATER
    (84) file_inclusion -> . POUND INCLUDE QUOTE HEADER QUOTE

    $end            reduce using rule 85 (empty -> .)
    BOOL            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    VOID            shift and go to state 14
    IDENTIFIER      shift and go to state 6
    POUND           shift and go to state 15

    external-declaration           shift and go to state 3
    program                        shift and go to state 17
    function                       shift and go to state 2
    empty                          shift and go to state 4
    type                           shift and go to state 5
    array_usage                    shift and go to state 7
    macro_definition               shift and go to state 8
    file_inclusion                 shift and go to state 9

state 4

    (3) program -> empty .

    $end            reduce using rule 3 (program -> empty .)


state 5

    (26) function -> type . IDENTIFIER LPAREN argument_list_option RPAREN compound_statement
    (4) external-declaration -> type . assignment SEMICOLON
    (6) external-declaration -> type . array_usage SEMICOLON
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET

    IDENTIFIER      shift and go to state 18

    assignment                     shift and go to state 19
    array_usage                    shift and go to state 20

state 6

    (24) array_usage -> IDENTIFIER . LBRACKET elements RBRACKET
    (25) array_usage -> IDENTIFIER . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 21


state 7

    (5) external-declaration -> array_usage . SEMICOLON

    SEMICOLON       shift and go to state 22


state 8

    (7) external-declaration -> macro_definition .

    BOOL            reduce using rule 7 (external-declaration -> macro_definition .)
    INT             reduce using rule 7 (external-declaration -> macro_definition .)
    FLOAT           reduce using rule 7 (external-declaration -> macro_definition .)
    CHAR            reduce using rule 7 (external-declaration -> macro_definition .)
    VOID            reduce using rule 7 (external-declaration -> macro_definition .)
    IDENTIFIER      reduce using rule 7 (external-declaration -> macro_definition .)
    POUND           reduce using rule 7 (external-declaration -> macro_definition .)
    $end            reduce using rule 7 (external-declaration -> macro_definition .)


state 9

    (8) external-declaration -> file_inclusion .

    BOOL            reduce using rule 8 (external-declaration -> file_inclusion .)
    INT             reduce using rule 8 (external-declaration -> file_inclusion .)
    FLOAT           reduce using rule 8 (external-declaration -> file_inclusion .)
    CHAR            reduce using rule 8 (external-declaration -> file_inclusion .)
    VOID            reduce using rule 8 (external-declaration -> file_inclusion .)
    IDENTIFIER      reduce using rule 8 (external-declaration -> file_inclusion .)
    POUND           reduce using rule 8 (external-declaration -> file_inclusion .)
    $end            reduce using rule 8 (external-declaration -> file_inclusion .)


state 10

    (70) type -> BOOL .

    IDENTIFIER      reduce using rule 70 (type -> BOOL .)


state 11

    (71) type -> INT .

    IDENTIFIER      reduce using rule 71 (type -> INT .)


state 12

    (72) type -> FLOAT .

    IDENTIFIER      reduce using rule 72 (type -> FLOAT .)


state 13

    (73) type -> CHAR .

    IDENTIFIER      reduce using rule 73 (type -> CHAR .)


state 14

    (74) type -> VOID .

    IDENTIFIER      reduce using rule 74 (type -> VOID .)


state 15

    (82) macro_definition -> POUND . DEFINE IDENTIFIER assignment
    (83) file_inclusion -> POUND . INCLUDE LESS HEADER GREATER
    (84) file_inclusion -> POUND . INCLUDE QUOTE HEADER QUOTE

    DEFINE          shift and go to state 23
    INCLUDE         shift and go to state 24


state 16

    (1) program -> function program .

    $end            reduce using rule 1 (program -> function program .)


state 17

    (2) program -> external-declaration program .

    $end            reduce using rule 2 (program -> external-declaration program .)


state 18

    (26) function -> type IDENTIFIER . LPAREN argument_list_option RPAREN compound_statement
    (14) assignment -> IDENTIFIER . EQUALS expression
    (15) assignment -> IDENTIFIER . PLUS EQUALS expression
    (16) assignment -> IDENTIFIER . MINUS EQUALS expression
    (24) array_usage -> IDENTIFIER . LBRACKET elements RBRACKET
    (25) array_usage -> IDENTIFIER . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 25
    EQUALS          shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    LBRACKET        shift and go to state 21


state 19

    (4) external-declaration -> type assignment . SEMICOLON

    SEMICOLON       shift and go to state 29


state 20

    (6) external-declaration -> type array_usage . SEMICOLON

    SEMICOLON       shift and go to state 30


state 21

    (24) array_usage -> IDENTIFIER LBRACKET . elements RBRACKET
    (25) array_usage -> IDENTIFIER LBRACKET . expression RBRACKET
    (20) elements -> . COMMA expression
    (21) elements -> . COMMA expression elements
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    COMMA           shift and go to state 34
    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    elements                       shift and go to state 32
    expression                     shift and go to state 33
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 22

    (5) external-declaration -> array_usage SEMICOLON .

    BOOL            reduce using rule 5 (external-declaration -> array_usage SEMICOLON .)
    INT             reduce using rule 5 (external-declaration -> array_usage SEMICOLON .)
    FLOAT           reduce using rule 5 (external-declaration -> array_usage SEMICOLON .)
    CHAR            reduce using rule 5 (external-declaration -> array_usage SEMICOLON .)
    VOID            reduce using rule 5 (external-declaration -> array_usage SEMICOLON .)
    IDENTIFIER      reduce using rule 5 (external-declaration -> array_usage SEMICOLON .)
    POUND           reduce using rule 5 (external-declaration -> array_usage SEMICOLON .)
    $end            reduce using rule 5 (external-declaration -> array_usage SEMICOLON .)


state 23

    (82) macro_definition -> POUND DEFINE . IDENTIFIER assignment

    IDENTIFIER      shift and go to state 47


state 24

    (83) file_inclusion -> POUND INCLUDE . LESS HEADER GREATER
    (84) file_inclusion -> POUND INCLUDE . QUOTE HEADER QUOTE

    LESS            shift and go to state 48
    QUOTE           shift and go to state 49


state 25

    (26) function -> type IDENTIFIER LPAREN . argument_list_option RPAREN compound_statement
    (27) argument_list_option -> . argument_list
    (28) argument_list_option -> . empty
    (29) argument_list -> . argument_list COMMA argument
    (30) argument_list -> . argument
    (85) empty -> .
    (31) argument -> . type IDENTIFIER
    (70) type -> . BOOL
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . VOID

    RPAREN          reduce using rule 85 (empty -> .)
    BOOL            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    VOID            shift and go to state 14

    type                           shift and go to state 50
    argument_list_option           shift and go to state 51
    argument_list                  shift and go to state 52
    empty                          shift and go to state 53
    argument                       shift and go to state 54

state 26

    (14) assignment -> IDENTIFIER EQUALS . expression
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 55
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 27

    (15) assignment -> IDENTIFIER PLUS . EQUALS expression

    EQUALS          shift and go to state 56


state 28

    (16) assignment -> IDENTIFIER MINUS . EQUALS expression

    EQUALS          shift and go to state 57


state 29

    (4) external-declaration -> type assignment SEMICOLON .

    BOOL            reduce using rule 4 (external-declaration -> type assignment SEMICOLON .)
    INT             reduce using rule 4 (external-declaration -> type assignment SEMICOLON .)
    FLOAT           reduce using rule 4 (external-declaration -> type assignment SEMICOLON .)
    CHAR            reduce using rule 4 (external-declaration -> type assignment SEMICOLON .)
    VOID            reduce using rule 4 (external-declaration -> type assignment SEMICOLON .)
    IDENTIFIER      reduce using rule 4 (external-declaration -> type assignment SEMICOLON .)
    POUND           reduce using rule 4 (external-declaration -> type assignment SEMICOLON .)
    $end            reduce using rule 4 (external-declaration -> type assignment SEMICOLON .)


state 30

    (6) external-declaration -> type array_usage SEMICOLON .

    BOOL            reduce using rule 6 (external-declaration -> type array_usage SEMICOLON .)
    INT             reduce using rule 6 (external-declaration -> type array_usage SEMICOLON .)
    FLOAT           reduce using rule 6 (external-declaration -> type array_usage SEMICOLON .)
    CHAR            reduce using rule 6 (external-declaration -> type array_usage SEMICOLON .)
    VOID            reduce using rule 6 (external-declaration -> type array_usage SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (external-declaration -> type array_usage SEMICOLON .)
    POUND           reduce using rule 6 (external-declaration -> type array_usage SEMICOLON .)
    $end            reduce using rule 6 (external-declaration -> type array_usage SEMICOLON .)


state 31

    (63) expression -> IDENTIFIER .
    (14) assignment -> IDENTIFIER . EQUALS expression
    (15) assignment -> IDENTIFIER . PLUS EQUALS expression
    (16) assignment -> IDENTIFIER . MINUS EQUALS expression
    (24) array_usage -> IDENTIFIER . LBRACKET elements RBRACKET
    (25) array_usage -> IDENTIFIER . LBRACKET expression RBRACKET
    (17) function_call -> IDENTIFIER . LPAREN RPAREN
    (18) function_call -> IDENTIFIER . LPAREN expression RPAREN
    (19) function_call -> IDENTIFIER . LPAREN elements RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RBRACKET        reduce using rule 63 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 63 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 63 (expression -> IDENTIFIER .)
    MODULUS         reduce using rule 63 (expression -> IDENTIFIER .)
    ISEQUAL         reduce using rule 63 (expression -> IDENTIFIER .)
    NOT             reduce using rule 63 (expression -> IDENTIFIER .)
    LESS            reduce using rule 63 (expression -> IDENTIFIER .)
    GREATER         reduce using rule 63 (expression -> IDENTIFIER .)
    AND             reduce using rule 63 (expression -> IDENTIFIER .)
    OR              reduce using rule 63 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 63 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 63 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 63 (expression -> IDENTIFIER .)
    BOOL            reduce using rule 63 (expression -> IDENTIFIER .)
    INT             reduce using rule 63 (expression -> IDENTIFIER .)
    FLOAT           reduce using rule 63 (expression -> IDENTIFIER .)
    CHAR            reduce using rule 63 (expression -> IDENTIFIER .)
    VOID            reduce using rule 63 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 63 (expression -> IDENTIFIER .)
    POUND           reduce using rule 63 (expression -> IDENTIFIER .)
    $end            reduce using rule 63 (expression -> IDENTIFIER .)
    EQUALS          shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    LBRACKET        shift and go to state 21
    LPAREN          shift and go to state 58

  ! PLUS            [ reduce using rule 63 (expression -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 63 (expression -> IDENTIFIER .) ]


state 32

    (24) array_usage -> IDENTIFIER LBRACKET elements . RBRACKET

    RBRACKET        shift and go to state 59


state 33

    (25) array_usage -> IDENTIFIER LBRACKET expression . RBRACKET
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    RBRACKET        shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    MODULUS         shift and go to state 65
    ISEQUAL         shift and go to state 66
    NOT             shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71


state 34

    (20) elements -> COMMA . expression
    (21) elements -> COMMA . expression elements
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 72
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 35

    (60) expression -> BOOLEAN .

    RBRACKET        reduce using rule 60 (expression -> BOOLEAN .)
    PLUS            reduce using rule 60 (expression -> BOOLEAN .)
    MINUS           reduce using rule 60 (expression -> BOOLEAN .)
    TIMES           reduce using rule 60 (expression -> BOOLEAN .)
    DIVIDE          reduce using rule 60 (expression -> BOOLEAN .)
    MODULUS         reduce using rule 60 (expression -> BOOLEAN .)
    ISEQUAL         reduce using rule 60 (expression -> BOOLEAN .)
    NOT             reduce using rule 60 (expression -> BOOLEAN .)
    LESS            reduce using rule 60 (expression -> BOOLEAN .)
    GREATER         reduce using rule 60 (expression -> BOOLEAN .)
    AND             reduce using rule 60 (expression -> BOOLEAN .)
    OR              reduce using rule 60 (expression -> BOOLEAN .)
    SEMICOLON       reduce using rule 60 (expression -> BOOLEAN .)
    COMMA           reduce using rule 60 (expression -> BOOLEAN .)
    RPAREN          reduce using rule 60 (expression -> BOOLEAN .)
    BOOL            reduce using rule 60 (expression -> BOOLEAN .)
    INT             reduce using rule 60 (expression -> BOOLEAN .)
    FLOAT           reduce using rule 60 (expression -> BOOLEAN .)
    CHAR            reduce using rule 60 (expression -> BOOLEAN .)
    VOID            reduce using rule 60 (expression -> BOOLEAN .)
    IDENTIFIER      reduce using rule 60 (expression -> BOOLEAN .)
    POUND           reduce using rule 60 (expression -> BOOLEAN .)
    $end            reduce using rule 60 (expression -> BOOLEAN .)


state 36

    (61) expression -> number .

    RBRACKET        reduce using rule 61 (expression -> number .)
    PLUS            reduce using rule 61 (expression -> number .)
    MINUS           reduce using rule 61 (expression -> number .)
    TIMES           reduce using rule 61 (expression -> number .)
    DIVIDE          reduce using rule 61 (expression -> number .)
    MODULUS         reduce using rule 61 (expression -> number .)
    ISEQUAL         reduce using rule 61 (expression -> number .)
    NOT             reduce using rule 61 (expression -> number .)
    LESS            reduce using rule 61 (expression -> number .)
    GREATER         reduce using rule 61 (expression -> number .)
    AND             reduce using rule 61 (expression -> number .)
    OR              reduce using rule 61 (expression -> number .)
    SEMICOLON       reduce using rule 61 (expression -> number .)
    COMMA           reduce using rule 61 (expression -> number .)
    RPAREN          reduce using rule 61 (expression -> number .)
    BOOL            reduce using rule 61 (expression -> number .)
    INT             reduce using rule 61 (expression -> number .)
    FLOAT           reduce using rule 61 (expression -> number .)
    CHAR            reduce using rule 61 (expression -> number .)
    VOID            reduce using rule 61 (expression -> number .)
    IDENTIFIER      reduce using rule 61 (expression -> number .)
    POUND           reduce using rule 61 (expression -> number .)
    $end            reduce using rule 61 (expression -> number .)


state 37

    (62) expression -> STRING .

    RBRACKET        reduce using rule 62 (expression -> STRING .)
    PLUS            reduce using rule 62 (expression -> STRING .)
    MINUS           reduce using rule 62 (expression -> STRING .)
    TIMES           reduce using rule 62 (expression -> STRING .)
    DIVIDE          reduce using rule 62 (expression -> STRING .)
    MODULUS         reduce using rule 62 (expression -> STRING .)
    ISEQUAL         reduce using rule 62 (expression -> STRING .)
    NOT             reduce using rule 62 (expression -> STRING .)
    LESS            reduce using rule 62 (expression -> STRING .)
    GREATER         reduce using rule 62 (expression -> STRING .)
    AND             reduce using rule 62 (expression -> STRING .)
    OR              reduce using rule 62 (expression -> STRING .)
    SEMICOLON       reduce using rule 62 (expression -> STRING .)
    COMMA           reduce using rule 62 (expression -> STRING .)
    RPAREN          reduce using rule 62 (expression -> STRING .)
    BOOL            reduce using rule 62 (expression -> STRING .)
    INT             reduce using rule 62 (expression -> STRING .)
    FLOAT           reduce using rule 62 (expression -> STRING .)
    CHAR            reduce using rule 62 (expression -> STRING .)
    VOID            reduce using rule 62 (expression -> STRING .)
    IDENTIFIER      reduce using rule 62 (expression -> STRING .)
    POUND           reduce using rule 62 (expression -> STRING .)
    $end            reduce using rule 62 (expression -> STRING .)


state 38

    (64) expression -> LETTER .

    RBRACKET        reduce using rule 64 (expression -> LETTER .)
    PLUS            reduce using rule 64 (expression -> LETTER .)
    MINUS           reduce using rule 64 (expression -> LETTER .)
    TIMES           reduce using rule 64 (expression -> LETTER .)
    DIVIDE          reduce using rule 64 (expression -> LETTER .)
    MODULUS         reduce using rule 64 (expression -> LETTER .)
    ISEQUAL         reduce using rule 64 (expression -> LETTER .)
    NOT             reduce using rule 64 (expression -> LETTER .)
    LESS            reduce using rule 64 (expression -> LETTER .)
    GREATER         reduce using rule 64 (expression -> LETTER .)
    AND             reduce using rule 64 (expression -> LETTER .)
    OR              reduce using rule 64 (expression -> LETTER .)
    SEMICOLON       reduce using rule 64 (expression -> LETTER .)
    COMMA           reduce using rule 64 (expression -> LETTER .)
    RPAREN          reduce using rule 64 (expression -> LETTER .)
    BOOL            reduce using rule 64 (expression -> LETTER .)
    INT             reduce using rule 64 (expression -> LETTER .)
    FLOAT           reduce using rule 64 (expression -> LETTER .)
    CHAR            reduce using rule 64 (expression -> LETTER .)
    VOID            reduce using rule 64 (expression -> LETTER .)
    IDENTIFIER      reduce using rule 64 (expression -> LETTER .)
    POUND           reduce using rule 64 (expression -> LETTER .)
    $end            reduce using rule 64 (expression -> LETTER .)


state 39

    (65) expression -> assignment .

    RBRACKET        reduce using rule 65 (expression -> assignment .)
    PLUS            reduce using rule 65 (expression -> assignment .)
    MINUS           reduce using rule 65 (expression -> assignment .)
    TIMES           reduce using rule 65 (expression -> assignment .)
    DIVIDE          reduce using rule 65 (expression -> assignment .)
    MODULUS         reduce using rule 65 (expression -> assignment .)
    ISEQUAL         reduce using rule 65 (expression -> assignment .)
    NOT             reduce using rule 65 (expression -> assignment .)
    LESS            reduce using rule 65 (expression -> assignment .)
    GREATER         reduce using rule 65 (expression -> assignment .)
    AND             reduce using rule 65 (expression -> assignment .)
    OR              reduce using rule 65 (expression -> assignment .)
    SEMICOLON       reduce using rule 65 (expression -> assignment .)
    COMMA           reduce using rule 65 (expression -> assignment .)
    RPAREN          reduce using rule 65 (expression -> assignment .)
    BOOL            reduce using rule 65 (expression -> assignment .)
    INT             reduce using rule 65 (expression -> assignment .)
    FLOAT           reduce using rule 65 (expression -> assignment .)
    CHAR            reduce using rule 65 (expression -> assignment .)
    VOID            reduce using rule 65 (expression -> assignment .)
    IDENTIFIER      reduce using rule 65 (expression -> assignment .)
    POUND           reduce using rule 65 (expression -> assignment .)
    $end            reduce using rule 65 (expression -> assignment .)


state 40

    (66) expression -> array_usage .

    RBRACKET        reduce using rule 66 (expression -> array_usage .)
    PLUS            reduce using rule 66 (expression -> array_usage .)
    MINUS           reduce using rule 66 (expression -> array_usage .)
    TIMES           reduce using rule 66 (expression -> array_usage .)
    DIVIDE          reduce using rule 66 (expression -> array_usage .)
    MODULUS         reduce using rule 66 (expression -> array_usage .)
    ISEQUAL         reduce using rule 66 (expression -> array_usage .)
    NOT             reduce using rule 66 (expression -> array_usage .)
    LESS            reduce using rule 66 (expression -> array_usage .)
    GREATER         reduce using rule 66 (expression -> array_usage .)
    AND             reduce using rule 66 (expression -> array_usage .)
    OR              reduce using rule 66 (expression -> array_usage .)
    SEMICOLON       reduce using rule 66 (expression -> array_usage .)
    COMMA           reduce using rule 66 (expression -> array_usage .)
    RPAREN          reduce using rule 66 (expression -> array_usage .)
    BOOL            reduce using rule 66 (expression -> array_usage .)
    INT             reduce using rule 66 (expression -> array_usage .)
    FLOAT           reduce using rule 66 (expression -> array_usage .)
    CHAR            reduce using rule 66 (expression -> array_usage .)
    VOID            reduce using rule 66 (expression -> array_usage .)
    IDENTIFIER      reduce using rule 66 (expression -> array_usage .)
    POUND           reduce using rule 66 (expression -> array_usage .)
    $end            reduce using rule 66 (expression -> array_usage .)


state 41

    (67) expression -> function_call .

    RBRACKET        reduce using rule 67 (expression -> function_call .)
    PLUS            reduce using rule 67 (expression -> function_call .)
    MINUS           reduce using rule 67 (expression -> function_call .)
    TIMES           reduce using rule 67 (expression -> function_call .)
    DIVIDE          reduce using rule 67 (expression -> function_call .)
    MODULUS         reduce using rule 67 (expression -> function_call .)
    ISEQUAL         reduce using rule 67 (expression -> function_call .)
    NOT             reduce using rule 67 (expression -> function_call .)
    LESS            reduce using rule 67 (expression -> function_call .)
    GREATER         reduce using rule 67 (expression -> function_call .)
    AND             reduce using rule 67 (expression -> function_call .)
    OR              reduce using rule 67 (expression -> function_call .)
    SEMICOLON       reduce using rule 67 (expression -> function_call .)
    COMMA           reduce using rule 67 (expression -> function_call .)
    RPAREN          reduce using rule 67 (expression -> function_call .)
    BOOL            reduce using rule 67 (expression -> function_call .)
    INT             reduce using rule 67 (expression -> function_call .)
    FLOAT           reduce using rule 67 (expression -> function_call .)
    CHAR            reduce using rule 67 (expression -> function_call .)
    VOID            reduce using rule 67 (expression -> function_call .)
    IDENTIFIER      reduce using rule 67 (expression -> function_call .)
    POUND           reduce using rule 67 (expression -> function_call .)
    $end            reduce using rule 67 (expression -> function_call .)


state 42

    (68) expression -> math_expression .

    RBRACKET        reduce using rule 68 (expression -> math_expression .)
    PLUS            reduce using rule 68 (expression -> math_expression .)
    MINUS           reduce using rule 68 (expression -> math_expression .)
    TIMES           reduce using rule 68 (expression -> math_expression .)
    DIVIDE          reduce using rule 68 (expression -> math_expression .)
    MODULUS         reduce using rule 68 (expression -> math_expression .)
    ISEQUAL         reduce using rule 68 (expression -> math_expression .)
    NOT             reduce using rule 68 (expression -> math_expression .)
    LESS            reduce using rule 68 (expression -> math_expression .)
    GREATER         reduce using rule 68 (expression -> math_expression .)
    AND             reduce using rule 68 (expression -> math_expression .)
    OR              reduce using rule 68 (expression -> math_expression .)
    SEMICOLON       reduce using rule 68 (expression -> math_expression .)
    COMMA           reduce using rule 68 (expression -> math_expression .)
    RPAREN          reduce using rule 68 (expression -> math_expression .)
    BOOL            reduce using rule 68 (expression -> math_expression .)
    INT             reduce using rule 68 (expression -> math_expression .)
    FLOAT           reduce using rule 68 (expression -> math_expression .)
    CHAR            reduce using rule 68 (expression -> math_expression .)
    VOID            reduce using rule 68 (expression -> math_expression .)
    IDENTIFIER      reduce using rule 68 (expression -> math_expression .)
    POUND           reduce using rule 68 (expression -> math_expression .)
    $end            reduce using rule 68 (expression -> math_expression .)


state 43

    (69) expression -> conditional_expression .

    RBRACKET        reduce using rule 69 (expression -> conditional_expression .)
    PLUS            reduce using rule 69 (expression -> conditional_expression .)
    MINUS           reduce using rule 69 (expression -> conditional_expression .)
    TIMES           reduce using rule 69 (expression -> conditional_expression .)
    DIVIDE          reduce using rule 69 (expression -> conditional_expression .)
    MODULUS         reduce using rule 69 (expression -> conditional_expression .)
    ISEQUAL         reduce using rule 69 (expression -> conditional_expression .)
    NOT             reduce using rule 69 (expression -> conditional_expression .)
    LESS            reduce using rule 69 (expression -> conditional_expression .)
    GREATER         reduce using rule 69 (expression -> conditional_expression .)
    AND             reduce using rule 69 (expression -> conditional_expression .)
    OR              reduce using rule 69 (expression -> conditional_expression .)
    SEMICOLON       reduce using rule 69 (expression -> conditional_expression .)
    COMMA           reduce using rule 69 (expression -> conditional_expression .)
    RPAREN          reduce using rule 69 (expression -> conditional_expression .)
    BOOL            reduce using rule 69 (expression -> conditional_expression .)
    INT             reduce using rule 69 (expression -> conditional_expression .)
    FLOAT           reduce using rule 69 (expression -> conditional_expression .)
    CHAR            reduce using rule 69 (expression -> conditional_expression .)
    VOID            reduce using rule 69 (expression -> conditional_expression .)
    IDENTIFIER      reduce using rule 69 (expression -> conditional_expression .)
    POUND           reduce using rule 69 (expression -> conditional_expression .)
    $end            reduce using rule 69 (expression -> conditional_expression .)


state 44

    (22) number -> INTEGER .

    RBRACKET        reduce using rule 22 (number -> INTEGER .)
    PLUS            reduce using rule 22 (number -> INTEGER .)
    MINUS           reduce using rule 22 (number -> INTEGER .)
    TIMES           reduce using rule 22 (number -> INTEGER .)
    DIVIDE          reduce using rule 22 (number -> INTEGER .)
    MODULUS         reduce using rule 22 (number -> INTEGER .)
    ISEQUAL         reduce using rule 22 (number -> INTEGER .)
    NOT             reduce using rule 22 (number -> INTEGER .)
    LESS            reduce using rule 22 (number -> INTEGER .)
    GREATER         reduce using rule 22 (number -> INTEGER .)
    AND             reduce using rule 22 (number -> INTEGER .)
    OR              reduce using rule 22 (number -> INTEGER .)
    SEMICOLON       reduce using rule 22 (number -> INTEGER .)
    COMMA           reduce using rule 22 (number -> INTEGER .)
    RPAREN          reduce using rule 22 (number -> INTEGER .)
    BOOL            reduce using rule 22 (number -> INTEGER .)
    INT             reduce using rule 22 (number -> INTEGER .)
    FLOAT           reduce using rule 22 (number -> INTEGER .)
    CHAR            reduce using rule 22 (number -> INTEGER .)
    VOID            reduce using rule 22 (number -> INTEGER .)
    IDENTIFIER      reduce using rule 22 (number -> INTEGER .)
    POUND           reduce using rule 22 (number -> INTEGER .)
    $end            reduce using rule 22 (number -> INTEGER .)


state 45

    (23) number -> FLOATINGPOINT .

    RBRACKET        reduce using rule 23 (number -> FLOATINGPOINT .)
    PLUS            reduce using rule 23 (number -> FLOATINGPOINT .)
    MINUS           reduce using rule 23 (number -> FLOATINGPOINT .)
    TIMES           reduce using rule 23 (number -> FLOATINGPOINT .)
    DIVIDE          reduce using rule 23 (number -> FLOATINGPOINT .)
    MODULUS         reduce using rule 23 (number -> FLOATINGPOINT .)
    ISEQUAL         reduce using rule 23 (number -> FLOATINGPOINT .)
    NOT             reduce using rule 23 (number -> FLOATINGPOINT .)
    LESS            reduce using rule 23 (number -> FLOATINGPOINT .)
    GREATER         reduce using rule 23 (number -> FLOATINGPOINT .)
    AND             reduce using rule 23 (number -> FLOATINGPOINT .)
    OR              reduce using rule 23 (number -> FLOATINGPOINT .)
    SEMICOLON       reduce using rule 23 (number -> FLOATINGPOINT .)
    COMMA           reduce using rule 23 (number -> FLOATINGPOINT .)
    RPAREN          reduce using rule 23 (number -> FLOATINGPOINT .)
    BOOL            reduce using rule 23 (number -> FLOATINGPOINT .)
    INT             reduce using rule 23 (number -> FLOATINGPOINT .)
    FLOAT           reduce using rule 23 (number -> FLOATINGPOINT .)
    CHAR            reduce using rule 23 (number -> FLOATINGPOINT .)
    VOID            reduce using rule 23 (number -> FLOATINGPOINT .)
    IDENTIFIER      reduce using rule 23 (number -> FLOATINGPOINT .)
    POUND           reduce using rule 23 (number -> FLOATINGPOINT .)
    $end            reduce using rule 23 (number -> FLOATINGPOINT .)


state 46

    (59) conditional_expression -> NOT . expression
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 73
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 47

    (82) macro_definition -> POUND DEFINE IDENTIFIER . assignment
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression

    IDENTIFIER      shift and go to state 74

    assignment                     shift and go to state 75

state 48

    (83) file_inclusion -> POUND INCLUDE LESS . HEADER GREATER

    HEADER          shift and go to state 76


state 49

    (84) file_inclusion -> POUND INCLUDE QUOTE . HEADER QUOTE

    HEADER          shift and go to state 77


state 50

    (31) argument -> type . IDENTIFIER

    IDENTIFIER      shift and go to state 78


state 51

    (26) function -> type IDENTIFIER LPAREN argument_list_option . RPAREN compound_statement

    RPAREN          shift and go to state 79


state 52

    (27) argument_list_option -> argument_list .
    (29) argument_list -> argument_list . COMMA argument

    RPAREN          reduce using rule 27 (argument_list_option -> argument_list .)
    COMMA           shift and go to state 80


state 53

    (28) argument_list_option -> empty .

    RPAREN          reduce using rule 28 (argument_list_option -> empty .)


state 54

    (30) argument_list -> argument .

    COMMA           reduce using rule 30 (argument_list -> argument .)
    RPAREN          reduce using rule 30 (argument_list -> argument .)


state 55

    (14) assignment -> IDENTIFIER EQUALS expression .
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    SEMICOLON       reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .)
    RBRACKET        reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .)
    MODULUS         reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .)
    ISEQUAL         reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .)
    NOT             reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .)
    LESS            reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .)
    GREATER         reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .)
    AND             reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .)
    OR              reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .)
    COMMA           reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .)
    RPAREN          reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .)
    BOOL            reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .)
    INT             reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .)
    FLOAT           reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .)
    CHAR            reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .)
    VOID            reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .)
    IDENTIFIER      reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .)
    POUND           reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .)
    $end            reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64

  ! PLUS            [ reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .) ]
  ! MINUS           [ reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .) ]
  ! TIMES           [ reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 14 (assignment -> IDENTIFIER EQUALS expression .) ]
  ! MODULUS         [ shift and go to state 65 ]
  ! ISEQUAL         [ shift and go to state 66 ]
  ! NOT             [ shift and go to state 67 ]
  ! LESS            [ shift and go to state 68 ]
  ! GREATER         [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 56

    (15) assignment -> IDENTIFIER PLUS EQUALS . expression
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 81
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 57

    (16) assignment -> IDENTIFIER MINUS EQUALS . expression
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 82
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 58

    (17) function_call -> IDENTIFIER LPAREN . RPAREN
    (18) function_call -> IDENTIFIER LPAREN . expression RPAREN
    (19) function_call -> IDENTIFIER LPAREN . elements RPAREN
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (20) elements -> . COMMA expression
    (21) elements -> . COMMA expression elements
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    RPAREN          shift and go to state 83
    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    COMMA           shift and go to state 34
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 84
    elements                       shift and go to state 85
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 59

    (24) array_usage -> IDENTIFIER LBRACKET elements RBRACKET .

    SEMICOLON       reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    RBRACKET        reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    PLUS            reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    MINUS           reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    TIMES           reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    DIVIDE          reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    MODULUS         reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    ISEQUAL         reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    NOT             reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    LESS            reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    GREATER         reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    AND             reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    OR              reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    COMMA           reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    RPAREN          reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    BOOL            reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    INT             reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    FLOAT           reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    CHAR            reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    VOID            reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    IDENTIFIER      reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    POUND           reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)
    $end            reduce using rule 24 (array_usage -> IDENTIFIER LBRACKET elements RBRACKET .)


state 60

    (25) array_usage -> IDENTIFIER LBRACKET expression RBRACKET .

    SEMICOLON       reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    MODULUS         reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    ISEQUAL         reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    NOT             reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    LESS            reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    AND             reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    OR              reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    BOOL            reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    INT             reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    CHAR            reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    VOID            reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    IDENTIFIER      reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    POUND           reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)
    $end            reduce using rule 25 (array_usage -> IDENTIFIER LBRACKET expression RBRACKET .)


state 61

    (75) math_expression -> expression PLUS . expression
    (80) math_expression -> expression PLUS . PLUS
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    PLUS            shift and go to state 87
    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 86
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 62

    (76) math_expression -> expression MINUS . expression
    (81) math_expression -> expression MINUS . MINUS
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    MINUS           shift and go to state 89
    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 88
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 63

    (77) math_expression -> expression TIMES . expression
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 90
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 64

    (78) math_expression -> expression DIVIDE . expression
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 91
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 65

    (79) math_expression -> expression MODULUS . expression
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 92
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 66

    (51) conditional_expression -> expression ISEQUAL . expression
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 93
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 67

    (52) conditional_expression -> expression NOT . EQUALS expression

    EQUALS          shift and go to state 94


state 68

    (53) conditional_expression -> expression LESS . expression
    (54) conditional_expression -> expression LESS . EQUALS expression
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    EQUALS          shift and go to state 96
    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 95
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 69

    (55) conditional_expression -> expression GREATER . expression
    (56) conditional_expression -> expression GREATER . EQUALS expression
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    EQUALS          shift and go to state 98
    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 97
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 70

    (57) conditional_expression -> expression AND . expression
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 99
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 71

    (58) conditional_expression -> expression OR . expression
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 100
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 72

    (20) elements -> COMMA expression .
    (21) elements -> COMMA expression . elements
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression
    (20) elements -> . COMMA expression
    (21) elements -> . COMMA expression elements

    RBRACKET        reduce using rule 20 (elements -> COMMA expression .)
    RPAREN          reduce using rule 20 (elements -> COMMA expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    MODULUS         shift and go to state 65
    ISEQUAL         shift and go to state 66
    NOT             shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71
    COMMA           shift and go to state 34

    elements                       shift and go to state 101

state 73

    (59) conditional_expression -> NOT expression .
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for ISEQUAL resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACKET        reduce using rule 59 (conditional_expression -> NOT expression .)
    SEMICOLON       reduce using rule 59 (conditional_expression -> NOT expression .)
    COMMA           reduce using rule 59 (conditional_expression -> NOT expression .)
    RPAREN          reduce using rule 59 (conditional_expression -> NOT expression .)
    BOOL            reduce using rule 59 (conditional_expression -> NOT expression .)
    INT             reduce using rule 59 (conditional_expression -> NOT expression .)
    FLOAT           reduce using rule 59 (conditional_expression -> NOT expression .)
    CHAR            reduce using rule 59 (conditional_expression -> NOT expression .)
    VOID            reduce using rule 59 (conditional_expression -> NOT expression .)
    IDENTIFIER      reduce using rule 59 (conditional_expression -> NOT expression .)
    POUND           reduce using rule 59 (conditional_expression -> NOT expression .)
    $end            reduce using rule 59 (conditional_expression -> NOT expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    MODULUS         shift and go to state 65
    ISEQUAL         shift and go to state 66
    NOT             shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71

  ! PLUS            [ reduce using rule 59 (conditional_expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 59 (conditional_expression -> NOT expression .) ]
  ! TIMES           [ reduce using rule 59 (conditional_expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 59 (conditional_expression -> NOT expression .) ]
  ! MODULUS         [ reduce using rule 59 (conditional_expression -> NOT expression .) ]
  ! ISEQUAL         [ reduce using rule 59 (conditional_expression -> NOT expression .) ]
  ! NOT             [ reduce using rule 59 (conditional_expression -> NOT expression .) ]
  ! LESS            [ reduce using rule 59 (conditional_expression -> NOT expression .) ]
  ! GREATER         [ reduce using rule 59 (conditional_expression -> NOT expression .) ]
  ! AND             [ reduce using rule 59 (conditional_expression -> NOT expression .) ]
  ! OR              [ reduce using rule 59 (conditional_expression -> NOT expression .) ]


state 74

    (14) assignment -> IDENTIFIER . EQUALS expression
    (15) assignment -> IDENTIFIER . PLUS EQUALS expression
    (16) assignment -> IDENTIFIER . MINUS EQUALS expression

    EQUALS          shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28


state 75

    (82) macro_definition -> POUND DEFINE IDENTIFIER assignment .

    BOOL            reduce using rule 82 (macro_definition -> POUND DEFINE IDENTIFIER assignment .)
    INT             reduce using rule 82 (macro_definition -> POUND DEFINE IDENTIFIER assignment .)
    FLOAT           reduce using rule 82 (macro_definition -> POUND DEFINE IDENTIFIER assignment .)
    CHAR            reduce using rule 82 (macro_definition -> POUND DEFINE IDENTIFIER assignment .)
    VOID            reduce using rule 82 (macro_definition -> POUND DEFINE IDENTIFIER assignment .)
    IDENTIFIER      reduce using rule 82 (macro_definition -> POUND DEFINE IDENTIFIER assignment .)
    POUND           reduce using rule 82 (macro_definition -> POUND DEFINE IDENTIFIER assignment .)
    $end            reduce using rule 82 (macro_definition -> POUND DEFINE IDENTIFIER assignment .)


state 76

    (83) file_inclusion -> POUND INCLUDE LESS HEADER . GREATER

    GREATER         shift and go to state 102


state 77

    (84) file_inclusion -> POUND INCLUDE QUOTE HEADER . QUOTE

    QUOTE           shift and go to state 103


state 78

    (31) argument -> type IDENTIFIER .

    COMMA           reduce using rule 31 (argument -> type IDENTIFIER .)
    RPAREN          reduce using rule 31 (argument -> type IDENTIFIER .)


state 79

    (26) function -> type IDENTIFIER LPAREN argument_list_option RPAREN . compound_statement
    (32) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 105

    compound_statement             shift and go to state 104

state 80

    (29) argument_list -> argument_list COMMA . argument
    (31) argument -> . type IDENTIFIER
    (70) type -> . BOOL
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . VOID

    BOOL            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    VOID            shift and go to state 14

    argument                       shift and go to state 106
    type                           shift and go to state 50

state 81

    (15) assignment -> IDENTIFIER PLUS EQUALS expression .
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    SEMICOLON       reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .)
    RBRACKET        reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .)
    MODULUS         reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .)
    ISEQUAL         reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .)
    NOT             reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .)
    LESS            reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .)
    GREATER         reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .)
    AND             reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .)
    OR              reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .)
    COMMA           reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .)
    RPAREN          reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .)
    BOOL            reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .)
    INT             reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .)
    FLOAT           reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .)
    CHAR            reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .)
    VOID            reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .)
    IDENTIFIER      reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .)
    POUND           reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .)
    $end            reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64

  ! PLUS            [ reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .) ]
  ! MINUS           [ reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .) ]
  ! TIMES           [ reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 15 (assignment -> IDENTIFIER PLUS EQUALS expression .) ]
  ! MODULUS         [ shift and go to state 65 ]
  ! ISEQUAL         [ shift and go to state 66 ]
  ! NOT             [ shift and go to state 67 ]
  ! LESS            [ shift and go to state 68 ]
  ! GREATER         [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 82

    (16) assignment -> IDENTIFIER MINUS EQUALS expression .
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    SEMICOLON       reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .)
    RBRACKET        reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .)
    MODULUS         reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .)
    ISEQUAL         reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .)
    NOT             reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .)
    LESS            reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .)
    GREATER         reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .)
    AND             reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .)
    OR              reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .)
    COMMA           reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .)
    RPAREN          reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .)
    BOOL            reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .)
    INT             reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .)
    FLOAT           reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .)
    CHAR            reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .)
    VOID            reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .)
    IDENTIFIER      reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .)
    POUND           reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .)
    $end            reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64

  ! PLUS            [ reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .) ]
  ! MINUS           [ reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .) ]
  ! TIMES           [ reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 16 (assignment -> IDENTIFIER MINUS EQUALS expression .) ]
  ! MODULUS         [ shift and go to state 65 ]
  ! ISEQUAL         [ shift and go to state 66 ]
  ! NOT             [ shift and go to state 67 ]
  ! LESS            [ shift and go to state 68 ]
  ! GREATER         [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 83

    (17) function_call -> IDENTIFIER LPAREN RPAREN .

    RBRACKET        reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    PLUS            reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    MINUS           reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    TIMES           reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    DIVIDE          reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    MODULUS         reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    ISEQUAL         reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    NOT             reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    LESS            reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    GREATER         reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    AND             reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    OR              reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    SEMICOLON       reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    COMMA           reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    RPAREN          reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    BOOL            reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    INT             reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    FLOAT           reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    CHAR            reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    VOID            reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    POUND           reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)
    $end            reduce using rule 17 (function_call -> IDENTIFIER LPAREN RPAREN .)


state 84

    (18) function_call -> IDENTIFIER LPAREN expression . RPAREN
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    RPAREN          shift and go to state 107
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    MODULUS         shift and go to state 65
    ISEQUAL         shift and go to state 66
    NOT             shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71


state 85

    (19) function_call -> IDENTIFIER LPAREN elements . RPAREN

    RPAREN          shift and go to state 108


state 86

    (75) math_expression -> expression PLUS expression .
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    RBRACKET        reduce using rule 75 (math_expression -> expression PLUS expression .)
    PLUS            reduce using rule 75 (math_expression -> expression PLUS expression .)
    MINUS           reduce using rule 75 (math_expression -> expression PLUS expression .)
    MODULUS         reduce using rule 75 (math_expression -> expression PLUS expression .)
    ISEQUAL         reduce using rule 75 (math_expression -> expression PLUS expression .)
    NOT             reduce using rule 75 (math_expression -> expression PLUS expression .)
    LESS            reduce using rule 75 (math_expression -> expression PLUS expression .)
    GREATER         reduce using rule 75 (math_expression -> expression PLUS expression .)
    AND             reduce using rule 75 (math_expression -> expression PLUS expression .)
    OR              reduce using rule 75 (math_expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 75 (math_expression -> expression PLUS expression .)
    COMMA           reduce using rule 75 (math_expression -> expression PLUS expression .)
    RPAREN          reduce using rule 75 (math_expression -> expression PLUS expression .)
    BOOL            reduce using rule 75 (math_expression -> expression PLUS expression .)
    INT             reduce using rule 75 (math_expression -> expression PLUS expression .)
    FLOAT           reduce using rule 75 (math_expression -> expression PLUS expression .)
    CHAR            reduce using rule 75 (math_expression -> expression PLUS expression .)
    VOID            reduce using rule 75 (math_expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 75 (math_expression -> expression PLUS expression .)
    POUND           reduce using rule 75 (math_expression -> expression PLUS expression .)
    $end            reduce using rule 75 (math_expression -> expression PLUS expression .)
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64

  ! TIMES           [ reduce using rule 75 (math_expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 75 (math_expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 62 ]
  ! MODULUS         [ shift and go to state 65 ]
  ! ISEQUAL         [ shift and go to state 66 ]
  ! NOT             [ shift and go to state 67 ]
  ! LESS            [ shift and go to state 68 ]
  ! GREATER         [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 87

    (80) math_expression -> expression PLUS PLUS .

    RBRACKET        reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    PLUS            reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    MINUS           reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    TIMES           reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    DIVIDE          reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    MODULUS         reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    ISEQUAL         reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    NOT             reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    LESS            reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    GREATER         reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    AND             reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    OR              reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    SEMICOLON       reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    COMMA           reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    RPAREN          reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    BOOL            reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    INT             reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    FLOAT           reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    CHAR            reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    VOID            reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    IDENTIFIER      reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    POUND           reduce using rule 80 (math_expression -> expression PLUS PLUS .)
    $end            reduce using rule 80 (math_expression -> expression PLUS PLUS .)


state 88

    (76) math_expression -> expression MINUS expression .
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    RBRACKET        reduce using rule 76 (math_expression -> expression MINUS expression .)
    PLUS            reduce using rule 76 (math_expression -> expression MINUS expression .)
    MINUS           reduce using rule 76 (math_expression -> expression MINUS expression .)
    MODULUS         reduce using rule 76 (math_expression -> expression MINUS expression .)
    ISEQUAL         reduce using rule 76 (math_expression -> expression MINUS expression .)
    NOT             reduce using rule 76 (math_expression -> expression MINUS expression .)
    LESS            reduce using rule 76 (math_expression -> expression MINUS expression .)
    GREATER         reduce using rule 76 (math_expression -> expression MINUS expression .)
    AND             reduce using rule 76 (math_expression -> expression MINUS expression .)
    OR              reduce using rule 76 (math_expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 76 (math_expression -> expression MINUS expression .)
    COMMA           reduce using rule 76 (math_expression -> expression MINUS expression .)
    RPAREN          reduce using rule 76 (math_expression -> expression MINUS expression .)
    BOOL            reduce using rule 76 (math_expression -> expression MINUS expression .)
    INT             reduce using rule 76 (math_expression -> expression MINUS expression .)
    FLOAT           reduce using rule 76 (math_expression -> expression MINUS expression .)
    CHAR            reduce using rule 76 (math_expression -> expression MINUS expression .)
    VOID            reduce using rule 76 (math_expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 76 (math_expression -> expression MINUS expression .)
    POUND           reduce using rule 76 (math_expression -> expression MINUS expression .)
    $end            reduce using rule 76 (math_expression -> expression MINUS expression .)
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64

  ! TIMES           [ reduce using rule 76 (math_expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 76 (math_expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 62 ]
  ! MODULUS         [ shift and go to state 65 ]
  ! ISEQUAL         [ shift and go to state 66 ]
  ! NOT             [ shift and go to state 67 ]
  ! LESS            [ shift and go to state 68 ]
  ! GREATER         [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 89

    (81) math_expression -> expression MINUS MINUS .

    RBRACKET        reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    PLUS            reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    MINUS           reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    TIMES           reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    DIVIDE          reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    MODULUS         reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    ISEQUAL         reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    NOT             reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    LESS            reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    GREATER         reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    AND             reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    OR              reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    SEMICOLON       reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    COMMA           reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    RPAREN          reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    BOOL            reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    INT             reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    FLOAT           reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    CHAR            reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    VOID            reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    IDENTIFIER      reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    POUND           reduce using rule 81 (math_expression -> expression MINUS MINUS .)
    $end            reduce using rule 81 (math_expression -> expression MINUS MINUS .)


state 90

    (77) math_expression -> expression TIMES expression .
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    RBRACKET        reduce using rule 77 (math_expression -> expression TIMES expression .)
    PLUS            reduce using rule 77 (math_expression -> expression TIMES expression .)
    MINUS           reduce using rule 77 (math_expression -> expression TIMES expression .)
    TIMES           reduce using rule 77 (math_expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 77 (math_expression -> expression TIMES expression .)
    MODULUS         reduce using rule 77 (math_expression -> expression TIMES expression .)
    ISEQUAL         reduce using rule 77 (math_expression -> expression TIMES expression .)
    NOT             reduce using rule 77 (math_expression -> expression TIMES expression .)
    LESS            reduce using rule 77 (math_expression -> expression TIMES expression .)
    GREATER         reduce using rule 77 (math_expression -> expression TIMES expression .)
    AND             reduce using rule 77 (math_expression -> expression TIMES expression .)
    OR              reduce using rule 77 (math_expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 77 (math_expression -> expression TIMES expression .)
    COMMA           reduce using rule 77 (math_expression -> expression TIMES expression .)
    RPAREN          reduce using rule 77 (math_expression -> expression TIMES expression .)
    BOOL            reduce using rule 77 (math_expression -> expression TIMES expression .)
    INT             reduce using rule 77 (math_expression -> expression TIMES expression .)
    FLOAT           reduce using rule 77 (math_expression -> expression TIMES expression .)
    CHAR            reduce using rule 77 (math_expression -> expression TIMES expression .)
    VOID            reduce using rule 77 (math_expression -> expression TIMES expression .)
    IDENTIFIER      reduce using rule 77 (math_expression -> expression TIMES expression .)
    POUND           reduce using rule 77 (math_expression -> expression TIMES expression .)
    $end            reduce using rule 77 (math_expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 62 ]
  ! TIMES           [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MODULUS         [ shift and go to state 65 ]
  ! ISEQUAL         [ shift and go to state 66 ]
  ! NOT             [ shift and go to state 67 ]
  ! LESS            [ shift and go to state 68 ]
  ! GREATER         [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 91

    (78) math_expression -> expression DIVIDE expression .
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    RBRACKET        reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    MODULUS         reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    ISEQUAL         reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    NOT             reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    LESS            reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    GREATER         reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    AND             reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    OR              reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    BOOL            reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    INT             reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    FLOAT           reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    CHAR            reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    VOID            reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    IDENTIFIER      reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    POUND           reduce using rule 78 (math_expression -> expression DIVIDE expression .)
    $end            reduce using rule 78 (math_expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 62 ]
  ! TIMES           [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MODULUS         [ shift and go to state 65 ]
  ! ISEQUAL         [ shift and go to state 66 ]
  ! NOT             [ shift and go to state 67 ]
  ! LESS            [ shift and go to state 68 ]
  ! GREATER         [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 92

    (79) math_expression -> expression MODULUS expression .
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for ISEQUAL resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACKET        reduce using rule 79 (math_expression -> expression MODULUS expression .)
    SEMICOLON       reduce using rule 79 (math_expression -> expression MODULUS expression .)
    COMMA           reduce using rule 79 (math_expression -> expression MODULUS expression .)
    RPAREN          reduce using rule 79 (math_expression -> expression MODULUS expression .)
    BOOL            reduce using rule 79 (math_expression -> expression MODULUS expression .)
    INT             reduce using rule 79 (math_expression -> expression MODULUS expression .)
    FLOAT           reduce using rule 79 (math_expression -> expression MODULUS expression .)
    CHAR            reduce using rule 79 (math_expression -> expression MODULUS expression .)
    VOID            reduce using rule 79 (math_expression -> expression MODULUS expression .)
    IDENTIFIER      reduce using rule 79 (math_expression -> expression MODULUS expression .)
    POUND           reduce using rule 79 (math_expression -> expression MODULUS expression .)
    $end            reduce using rule 79 (math_expression -> expression MODULUS expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    MODULUS         shift and go to state 65
    ISEQUAL         shift and go to state 66
    NOT             shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71

  ! PLUS            [ reduce using rule 79 (math_expression -> expression MODULUS expression .) ]
  ! MINUS           [ reduce using rule 79 (math_expression -> expression MODULUS expression .) ]
  ! TIMES           [ reduce using rule 79 (math_expression -> expression MODULUS expression .) ]
  ! DIVIDE          [ reduce using rule 79 (math_expression -> expression MODULUS expression .) ]
  ! MODULUS         [ reduce using rule 79 (math_expression -> expression MODULUS expression .) ]
  ! ISEQUAL         [ reduce using rule 79 (math_expression -> expression MODULUS expression .) ]
  ! NOT             [ reduce using rule 79 (math_expression -> expression MODULUS expression .) ]
  ! LESS            [ reduce using rule 79 (math_expression -> expression MODULUS expression .) ]
  ! GREATER         [ reduce using rule 79 (math_expression -> expression MODULUS expression .) ]
  ! AND             [ reduce using rule 79 (math_expression -> expression MODULUS expression .) ]
  ! OR              [ reduce using rule 79 (math_expression -> expression MODULUS expression .) ]


state 93

    (51) conditional_expression -> expression ISEQUAL expression .
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    RBRACKET        reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .)
    MODULUS         reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .)
    NOT             reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .)
    SEMICOLON       reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .)
    COMMA           reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .)
    RPAREN          reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .)
    BOOL            reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .)
    INT             reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .)
    FLOAT           reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .)
    CHAR            reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .)
    VOID            reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .)
    IDENTIFIER      reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .)
    POUND           reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .)
    $end            reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    ISEQUAL         shift and go to state 66
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71

  ! PLUS            [ reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .) ]
  ! MINUS           [ reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .) ]
  ! TIMES           [ reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .) ]
  ! ISEQUAL         [ reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .) ]
  ! LESS            [ reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .) ]
  ! GREATER         [ reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .) ]
  ! AND             [ reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .) ]
  ! OR              [ reduce using rule 51 (conditional_expression -> expression ISEQUAL expression .) ]
  ! MODULUS         [ shift and go to state 65 ]
  ! NOT             [ shift and go to state 67 ]


state 94

    (52) conditional_expression -> expression NOT EQUALS . expression
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 109
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 95

    (53) conditional_expression -> expression LESS expression .
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    RBRACKET        reduce using rule 53 (conditional_expression -> expression LESS expression .)
    MODULUS         reduce using rule 53 (conditional_expression -> expression LESS expression .)
    ISEQUAL         reduce using rule 53 (conditional_expression -> expression LESS expression .)
    NOT             reduce using rule 53 (conditional_expression -> expression LESS expression .)
    LESS            reduce using rule 53 (conditional_expression -> expression LESS expression .)
    GREATER         reduce using rule 53 (conditional_expression -> expression LESS expression .)
    AND             reduce using rule 53 (conditional_expression -> expression LESS expression .)
    OR              reduce using rule 53 (conditional_expression -> expression LESS expression .)
    SEMICOLON       reduce using rule 53 (conditional_expression -> expression LESS expression .)
    COMMA           reduce using rule 53 (conditional_expression -> expression LESS expression .)
    RPAREN          reduce using rule 53 (conditional_expression -> expression LESS expression .)
    BOOL            reduce using rule 53 (conditional_expression -> expression LESS expression .)
    INT             reduce using rule 53 (conditional_expression -> expression LESS expression .)
    FLOAT           reduce using rule 53 (conditional_expression -> expression LESS expression .)
    CHAR            reduce using rule 53 (conditional_expression -> expression LESS expression .)
    VOID            reduce using rule 53 (conditional_expression -> expression LESS expression .)
    IDENTIFIER      reduce using rule 53 (conditional_expression -> expression LESS expression .)
    POUND           reduce using rule 53 (conditional_expression -> expression LESS expression .)
    $end            reduce using rule 53 (conditional_expression -> expression LESS expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64

  ! PLUS            [ reduce using rule 53 (conditional_expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 53 (conditional_expression -> expression LESS expression .) ]
  ! TIMES           [ reduce using rule 53 (conditional_expression -> expression LESS expression .) ]
  ! DIVIDE          [ reduce using rule 53 (conditional_expression -> expression LESS expression .) ]
  ! MODULUS         [ shift and go to state 65 ]
  ! ISEQUAL         [ shift and go to state 66 ]
  ! NOT             [ shift and go to state 67 ]
  ! LESS            [ shift and go to state 68 ]
  ! GREATER         [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 96

    (54) conditional_expression -> expression LESS EQUALS . expression
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 110
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 97

    (55) conditional_expression -> expression GREATER expression .
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    RBRACKET        reduce using rule 55 (conditional_expression -> expression GREATER expression .)
    MODULUS         reduce using rule 55 (conditional_expression -> expression GREATER expression .)
    ISEQUAL         reduce using rule 55 (conditional_expression -> expression GREATER expression .)
    NOT             reduce using rule 55 (conditional_expression -> expression GREATER expression .)
    LESS            reduce using rule 55 (conditional_expression -> expression GREATER expression .)
    GREATER         reduce using rule 55 (conditional_expression -> expression GREATER expression .)
    AND             reduce using rule 55 (conditional_expression -> expression GREATER expression .)
    OR              reduce using rule 55 (conditional_expression -> expression GREATER expression .)
    SEMICOLON       reduce using rule 55 (conditional_expression -> expression GREATER expression .)
    COMMA           reduce using rule 55 (conditional_expression -> expression GREATER expression .)
    RPAREN          reduce using rule 55 (conditional_expression -> expression GREATER expression .)
    BOOL            reduce using rule 55 (conditional_expression -> expression GREATER expression .)
    INT             reduce using rule 55 (conditional_expression -> expression GREATER expression .)
    FLOAT           reduce using rule 55 (conditional_expression -> expression GREATER expression .)
    CHAR            reduce using rule 55 (conditional_expression -> expression GREATER expression .)
    VOID            reduce using rule 55 (conditional_expression -> expression GREATER expression .)
    IDENTIFIER      reduce using rule 55 (conditional_expression -> expression GREATER expression .)
    POUND           reduce using rule 55 (conditional_expression -> expression GREATER expression .)
    $end            reduce using rule 55 (conditional_expression -> expression GREATER expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64

  ! PLUS            [ reduce using rule 55 (conditional_expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 55 (conditional_expression -> expression GREATER expression .) ]
  ! TIMES           [ reduce using rule 55 (conditional_expression -> expression GREATER expression .) ]
  ! DIVIDE          [ reduce using rule 55 (conditional_expression -> expression GREATER expression .) ]
  ! MODULUS         [ shift and go to state 65 ]
  ! ISEQUAL         [ shift and go to state 66 ]
  ! NOT             [ shift and go to state 67 ]
  ! LESS            [ shift and go to state 68 ]
  ! GREATER         [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 98

    (56) conditional_expression -> expression GREATER EQUALS . expression
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 111
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 99

    (57) conditional_expression -> expression AND expression .
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    RBRACKET        reduce using rule 57 (conditional_expression -> expression AND expression .)
    MODULUS         reduce using rule 57 (conditional_expression -> expression AND expression .)
    ISEQUAL         reduce using rule 57 (conditional_expression -> expression AND expression .)
    NOT             reduce using rule 57 (conditional_expression -> expression AND expression .)
    AND             reduce using rule 57 (conditional_expression -> expression AND expression .)
    OR              reduce using rule 57 (conditional_expression -> expression AND expression .)
    SEMICOLON       reduce using rule 57 (conditional_expression -> expression AND expression .)
    COMMA           reduce using rule 57 (conditional_expression -> expression AND expression .)
    RPAREN          reduce using rule 57 (conditional_expression -> expression AND expression .)
    BOOL            reduce using rule 57 (conditional_expression -> expression AND expression .)
    INT             reduce using rule 57 (conditional_expression -> expression AND expression .)
    FLOAT           reduce using rule 57 (conditional_expression -> expression AND expression .)
    CHAR            reduce using rule 57 (conditional_expression -> expression AND expression .)
    VOID            reduce using rule 57 (conditional_expression -> expression AND expression .)
    IDENTIFIER      reduce using rule 57 (conditional_expression -> expression AND expression .)
    POUND           reduce using rule 57 (conditional_expression -> expression AND expression .)
    $end            reduce using rule 57 (conditional_expression -> expression AND expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    LESS            shift and go to state 68
    GREATER         shift and go to state 69

  ! PLUS            [ reduce using rule 57 (conditional_expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 57 (conditional_expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 57 (conditional_expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 57 (conditional_expression -> expression AND expression .) ]
  ! LESS            [ reduce using rule 57 (conditional_expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 57 (conditional_expression -> expression AND expression .) ]
  ! MODULUS         [ shift and go to state 65 ]
  ! ISEQUAL         [ shift and go to state 66 ]
  ! NOT             [ shift and go to state 67 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 100

    (58) conditional_expression -> expression OR expression .
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    RBRACKET        reduce using rule 58 (conditional_expression -> expression OR expression .)
    MODULUS         reduce using rule 58 (conditional_expression -> expression OR expression .)
    ISEQUAL         reduce using rule 58 (conditional_expression -> expression OR expression .)
    NOT             reduce using rule 58 (conditional_expression -> expression OR expression .)
    AND             reduce using rule 58 (conditional_expression -> expression OR expression .)
    OR              reduce using rule 58 (conditional_expression -> expression OR expression .)
    SEMICOLON       reduce using rule 58 (conditional_expression -> expression OR expression .)
    COMMA           reduce using rule 58 (conditional_expression -> expression OR expression .)
    RPAREN          reduce using rule 58 (conditional_expression -> expression OR expression .)
    BOOL            reduce using rule 58 (conditional_expression -> expression OR expression .)
    INT             reduce using rule 58 (conditional_expression -> expression OR expression .)
    FLOAT           reduce using rule 58 (conditional_expression -> expression OR expression .)
    CHAR            reduce using rule 58 (conditional_expression -> expression OR expression .)
    VOID            reduce using rule 58 (conditional_expression -> expression OR expression .)
    IDENTIFIER      reduce using rule 58 (conditional_expression -> expression OR expression .)
    POUND           reduce using rule 58 (conditional_expression -> expression OR expression .)
    $end            reduce using rule 58 (conditional_expression -> expression OR expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    LESS            shift and go to state 68
    GREATER         shift and go to state 69

  ! PLUS            [ reduce using rule 58 (conditional_expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 58 (conditional_expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 58 (conditional_expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 58 (conditional_expression -> expression OR expression .) ]
  ! LESS            [ reduce using rule 58 (conditional_expression -> expression OR expression .) ]
  ! GREATER         [ reduce using rule 58 (conditional_expression -> expression OR expression .) ]
  ! MODULUS         [ shift and go to state 65 ]
  ! ISEQUAL         [ shift and go to state 66 ]
  ! NOT             [ shift and go to state 67 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 101

    (21) elements -> COMMA expression elements .

    RBRACKET        reduce using rule 21 (elements -> COMMA expression elements .)
    RPAREN          reduce using rule 21 (elements -> COMMA expression elements .)


state 102

    (83) file_inclusion -> POUND INCLUDE LESS HEADER GREATER .

    BOOL            reduce using rule 83 (file_inclusion -> POUND INCLUDE LESS HEADER GREATER .)
    INT             reduce using rule 83 (file_inclusion -> POUND INCLUDE LESS HEADER GREATER .)
    FLOAT           reduce using rule 83 (file_inclusion -> POUND INCLUDE LESS HEADER GREATER .)
    CHAR            reduce using rule 83 (file_inclusion -> POUND INCLUDE LESS HEADER GREATER .)
    VOID            reduce using rule 83 (file_inclusion -> POUND INCLUDE LESS HEADER GREATER .)
    IDENTIFIER      reduce using rule 83 (file_inclusion -> POUND INCLUDE LESS HEADER GREATER .)
    POUND           reduce using rule 83 (file_inclusion -> POUND INCLUDE LESS HEADER GREATER .)
    $end            reduce using rule 83 (file_inclusion -> POUND INCLUDE LESS HEADER GREATER .)


state 103

    (84) file_inclusion -> POUND INCLUDE QUOTE HEADER QUOTE .

    BOOL            reduce using rule 84 (file_inclusion -> POUND INCLUDE QUOTE HEADER QUOTE .)
    INT             reduce using rule 84 (file_inclusion -> POUND INCLUDE QUOTE HEADER QUOTE .)
    FLOAT           reduce using rule 84 (file_inclusion -> POUND INCLUDE QUOTE HEADER QUOTE .)
    CHAR            reduce using rule 84 (file_inclusion -> POUND INCLUDE QUOTE HEADER QUOTE .)
    VOID            reduce using rule 84 (file_inclusion -> POUND INCLUDE QUOTE HEADER QUOTE .)
    IDENTIFIER      reduce using rule 84 (file_inclusion -> POUND INCLUDE QUOTE HEADER QUOTE .)
    POUND           reduce using rule 84 (file_inclusion -> POUND INCLUDE QUOTE HEADER QUOTE .)
    $end            reduce using rule 84 (file_inclusion -> POUND INCLUDE QUOTE HEADER QUOTE .)


state 104

    (26) function -> type IDENTIFIER LPAREN argument_list_option RPAREN compound_statement .

    BOOL            reduce using rule 26 (function -> type IDENTIFIER LPAREN argument_list_option RPAREN compound_statement .)
    INT             reduce using rule 26 (function -> type IDENTIFIER LPAREN argument_list_option RPAREN compound_statement .)
    FLOAT           reduce using rule 26 (function -> type IDENTIFIER LPAREN argument_list_option RPAREN compound_statement .)
    CHAR            reduce using rule 26 (function -> type IDENTIFIER LPAREN argument_list_option RPAREN compound_statement .)
    VOID            reduce using rule 26 (function -> type IDENTIFIER LPAREN argument_list_option RPAREN compound_statement .)
    IDENTIFIER      reduce using rule 26 (function -> type IDENTIFIER LPAREN argument_list_option RPAREN compound_statement .)
    POUND           reduce using rule 26 (function -> type IDENTIFIER LPAREN argument_list_option RPAREN compound_statement .)
    $end            reduce using rule 26 (function -> type IDENTIFIER LPAREN argument_list_option RPAREN compound_statement .)


state 105

    (32) compound_statement -> LBRACE . statement_list RBRACE
    (33) statement_list -> . statement_list statement
    (34) statement_list -> . empty
    (85) empty -> .

    RBRACE          reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    DO              reduce using rule 85 (empty -> .)
    IF              reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    BOOL            reduce using rule 85 (empty -> .)
    INT             reduce using rule 85 (empty -> .)
    FLOAT           reduce using rule 85 (empty -> .)
    CHAR            reduce using rule 85 (empty -> .)
    VOID            reduce using rule 85 (empty -> .)
    IDENTIFIER      reduce using rule 85 (empty -> .)

    statement_list                 shift and go to state 112
    empty                          shift and go to state 113

state 106

    (29) argument_list -> argument_list COMMA argument .

    COMMA           reduce using rule 29 (argument_list -> argument_list COMMA argument .)
    RPAREN          reduce using rule 29 (argument_list -> argument_list COMMA argument .)


state 107

    (18) function_call -> IDENTIFIER LPAREN expression RPAREN .

    RBRACKET        reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    PLUS            reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    MINUS           reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    TIMES           reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    MODULUS         reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    ISEQUAL         reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    NOT             reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    LESS            reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    GREATER         reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    AND             reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    OR              reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    COMMA           reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    RPAREN          reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    BOOL            reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    INT             reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    FLOAT           reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    CHAR            reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    VOID            reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    POUND           reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)
    $end            reduce using rule 18 (function_call -> IDENTIFIER LPAREN expression RPAREN .)


state 108

    (19) function_call -> IDENTIFIER LPAREN elements RPAREN .

    RBRACKET        reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    PLUS            reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    MINUS           reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    TIMES           reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    DIVIDE          reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    MODULUS         reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    ISEQUAL         reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    NOT             reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    LESS            reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    GREATER         reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    AND             reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    OR              reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    SEMICOLON       reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    COMMA           reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    RPAREN          reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    BOOL            reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    INT             reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    FLOAT           reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    CHAR            reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    VOID            reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    IDENTIFIER      reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    POUND           reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)
    $end            reduce using rule 19 (function_call -> IDENTIFIER LPAREN elements RPAREN .)


state 109

    (52) conditional_expression -> expression NOT EQUALS expression .
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    RBRACKET        reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .)
    MODULUS         reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .)
    ISEQUAL         reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .)
    NOT             reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .)
    LESS            reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .)
    GREATER         reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .)
    AND             reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .)
    OR              reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .)
    SEMICOLON       reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .)
    COMMA           reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .)
    RPAREN          reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .)
    BOOL            reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .)
    INT             reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .)
    FLOAT           reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .)
    CHAR            reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .)
    VOID            reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .)
    IDENTIFIER      reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .)
    POUND           reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .)
    $end            reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64

  ! PLUS            [ reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .) ]
  ! MINUS           [ reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .) ]
  ! TIMES           [ reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 52 (conditional_expression -> expression NOT EQUALS expression .) ]
  ! MODULUS         [ shift and go to state 65 ]
  ! ISEQUAL         [ shift and go to state 66 ]
  ! NOT             [ shift and go to state 67 ]
  ! LESS            [ shift and go to state 68 ]
  ! GREATER         [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 110

    (54) conditional_expression -> expression LESS EQUALS expression .
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    RBRACKET        reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .)
    MODULUS         reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .)
    ISEQUAL         reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .)
    NOT             reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .)
    LESS            reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .)
    GREATER         reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .)
    AND             reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .)
    OR              reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .)
    SEMICOLON       reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .)
    COMMA           reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .)
    RPAREN          reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .)
    BOOL            reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .)
    INT             reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .)
    FLOAT           reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .)
    CHAR            reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .)
    VOID            reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .)
    IDENTIFIER      reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .)
    POUND           reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .)
    $end            reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64

  ! PLUS            [ reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .) ]
  ! MINUS           [ reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .) ]
  ! TIMES           [ reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 54 (conditional_expression -> expression LESS EQUALS expression .) ]
  ! MODULUS         [ shift and go to state 65 ]
  ! ISEQUAL         [ shift and go to state 66 ]
  ! NOT             [ shift and go to state 67 ]
  ! LESS            [ shift and go to state 68 ]
  ! GREATER         [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 111

    (56) conditional_expression -> expression GREATER EQUALS expression .
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    RBRACKET        reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .)
    MODULUS         reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .)
    ISEQUAL         reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .)
    NOT             reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .)
    LESS            reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .)
    GREATER         reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .)
    AND             reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .)
    OR              reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .)
    SEMICOLON       reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .)
    COMMA           reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .)
    RPAREN          reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .)
    BOOL            reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .)
    INT             reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .)
    FLOAT           reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .)
    CHAR            reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .)
    VOID            reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .)
    IDENTIFIER      reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .)
    POUND           reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .)
    $end            reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64

  ! PLUS            [ reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .) ]
  ! MINUS           [ reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .) ]
  ! TIMES           [ reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 56 (conditional_expression -> expression GREATER EQUALS expression .) ]
  ! MODULUS         [ shift and go to state 65 ]
  ! ISEQUAL         [ shift and go to state 66 ]
  ! NOT             [ shift and go to state 67 ]
  ! LESS            [ shift and go to state 68 ]
  ! GREATER         [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 112

    (32) compound_statement -> LBRACE statement_list . RBRACE
    (33) statement_list -> statement_list . statement
    (35) statement -> . iteration_statement
    (36) statement -> . declaration
    (37) statement -> . selection_statement
    (38) statement -> . return-statement
    (39) iteration_statement -> . WHILE LPAREN expression RPAREN compound_statement
    (40) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (41) iteration_statement -> . DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON
    (42) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (9) declaration -> . type assignment SEMICOLON
    (10) declaration -> . assignment SEMICOLON
    (11) declaration -> . function_call SEMICOLON
    (12) declaration -> . array_usage SEMICOLON
    (13) declaration -> . type array_usage SEMICOLON
    (43) selection_statement -> . IF LPAREN expression RPAREN compound_statement
    (44) selection_statement -> . IF LPAREN expression RPAREN statement
    (45) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement
    (46) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE statement
    (47) selection_statement -> . IF LPAREN expression RPAREN statement ELSE compound_statement
    (48) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (49) return-statement -> . RETURN SEMICOLON
    (50) return-statement -> . RETURN expression SEMICOLON
    (70) type -> . BOOL
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . VOID
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET

    RBRACE          shift and go to state 114
    WHILE           shift and go to state 120
    DO              shift and go to state 121
    IF              shift and go to state 126
    RETURN          shift and go to state 127
    BOOL            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    VOID            shift and go to state 14
    IDENTIFIER      shift and go to state 128

    statement                      shift and go to state 115
    iteration_statement            shift and go to state 116
    declaration                    shift and go to state 117
    selection_statement            shift and go to state 118
    return-statement               shift and go to state 119
    type                           shift and go to state 122
    assignment                     shift and go to state 123
    function_call                  shift and go to state 124
    array_usage                    shift and go to state 125

state 113

    (34) statement_list -> empty .

    RBRACE          reduce using rule 34 (statement_list -> empty .)
    WHILE           reduce using rule 34 (statement_list -> empty .)
    DO              reduce using rule 34 (statement_list -> empty .)
    IF              reduce using rule 34 (statement_list -> empty .)
    RETURN          reduce using rule 34 (statement_list -> empty .)
    BOOL            reduce using rule 34 (statement_list -> empty .)
    INT             reduce using rule 34 (statement_list -> empty .)
    FLOAT           reduce using rule 34 (statement_list -> empty .)
    CHAR            reduce using rule 34 (statement_list -> empty .)
    VOID            reduce using rule 34 (statement_list -> empty .)
    IDENTIFIER      reduce using rule 34 (statement_list -> empty .)


state 114

    (32) compound_statement -> LBRACE statement_list RBRACE .

    BOOL            reduce using rule 32 (compound_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 32 (compound_statement -> LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 32 (compound_statement -> LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 32 (compound_statement -> LBRACE statement_list RBRACE .)
    VOID            reduce using rule 32 (compound_statement -> LBRACE statement_list RBRACE .)
    IDENTIFIER      reduce using rule 32 (compound_statement -> LBRACE statement_list RBRACE .)
    POUND           reduce using rule 32 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 32 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 32 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 32 (compound_statement -> LBRACE statement_list RBRACE .)
    DO              reduce using rule 32 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 32 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 32 (compound_statement -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 32 (compound_statement -> LBRACE statement_list RBRACE .)


state 115

    (33) statement_list -> statement_list statement .

    RBRACE          reduce using rule 33 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 33 (statement_list -> statement_list statement .)
    DO              reduce using rule 33 (statement_list -> statement_list statement .)
    IF              reduce using rule 33 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 33 (statement_list -> statement_list statement .)
    BOOL            reduce using rule 33 (statement_list -> statement_list statement .)
    INT             reduce using rule 33 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 33 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 33 (statement_list -> statement_list statement .)
    VOID            reduce using rule 33 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 33 (statement_list -> statement_list statement .)


state 116

    (35) statement -> iteration_statement .

    RBRACE          reduce using rule 35 (statement -> iteration_statement .)
    WHILE           reduce using rule 35 (statement -> iteration_statement .)
    DO              reduce using rule 35 (statement -> iteration_statement .)
    IF              reduce using rule 35 (statement -> iteration_statement .)
    RETURN          reduce using rule 35 (statement -> iteration_statement .)
    BOOL            reduce using rule 35 (statement -> iteration_statement .)
    INT             reduce using rule 35 (statement -> iteration_statement .)
    FLOAT           reduce using rule 35 (statement -> iteration_statement .)
    CHAR            reduce using rule 35 (statement -> iteration_statement .)
    VOID            reduce using rule 35 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 35 (statement -> iteration_statement .)
    ELSE            reduce using rule 35 (statement -> iteration_statement .)


state 117

    (36) statement -> declaration .

    RBRACE          reduce using rule 36 (statement -> declaration .)
    WHILE           reduce using rule 36 (statement -> declaration .)
    DO              reduce using rule 36 (statement -> declaration .)
    IF              reduce using rule 36 (statement -> declaration .)
    RETURN          reduce using rule 36 (statement -> declaration .)
    BOOL            reduce using rule 36 (statement -> declaration .)
    INT             reduce using rule 36 (statement -> declaration .)
    FLOAT           reduce using rule 36 (statement -> declaration .)
    CHAR            reduce using rule 36 (statement -> declaration .)
    VOID            reduce using rule 36 (statement -> declaration .)
    IDENTIFIER      reduce using rule 36 (statement -> declaration .)
    ELSE            reduce using rule 36 (statement -> declaration .)


state 118

    (37) statement -> selection_statement .

    RBRACE          reduce using rule 37 (statement -> selection_statement .)
    WHILE           reduce using rule 37 (statement -> selection_statement .)
    DO              reduce using rule 37 (statement -> selection_statement .)
    IF              reduce using rule 37 (statement -> selection_statement .)
    RETURN          reduce using rule 37 (statement -> selection_statement .)
    BOOL            reduce using rule 37 (statement -> selection_statement .)
    INT             reduce using rule 37 (statement -> selection_statement .)
    FLOAT           reduce using rule 37 (statement -> selection_statement .)
    CHAR            reduce using rule 37 (statement -> selection_statement .)
    VOID            reduce using rule 37 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 37 (statement -> selection_statement .)
    ELSE            reduce using rule 37 (statement -> selection_statement .)


state 119

    (38) statement -> return-statement .

    RBRACE          reduce using rule 38 (statement -> return-statement .)
    WHILE           reduce using rule 38 (statement -> return-statement .)
    DO              reduce using rule 38 (statement -> return-statement .)
    IF              reduce using rule 38 (statement -> return-statement .)
    RETURN          reduce using rule 38 (statement -> return-statement .)
    BOOL            reduce using rule 38 (statement -> return-statement .)
    INT             reduce using rule 38 (statement -> return-statement .)
    FLOAT           reduce using rule 38 (statement -> return-statement .)
    CHAR            reduce using rule 38 (statement -> return-statement .)
    VOID            reduce using rule 38 (statement -> return-statement .)
    IDENTIFIER      reduce using rule 38 (statement -> return-statement .)
    ELSE            reduce using rule 38 (statement -> return-statement .)


state 120

    (39) iteration_statement -> WHILE . LPAREN expression RPAREN compound_statement
    (40) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 129


state 121

    (41) iteration_statement -> DO . compound_statement WHILE LPAREN expression RPAREN SEMICOLON
    (42) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMICOLON
    (32) compound_statement -> . LBRACE statement_list RBRACE
    (35) statement -> . iteration_statement
    (36) statement -> . declaration
    (37) statement -> . selection_statement
    (38) statement -> . return-statement
    (39) iteration_statement -> . WHILE LPAREN expression RPAREN compound_statement
    (40) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (41) iteration_statement -> . DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON
    (42) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (9) declaration -> . type assignment SEMICOLON
    (10) declaration -> . assignment SEMICOLON
    (11) declaration -> . function_call SEMICOLON
    (12) declaration -> . array_usage SEMICOLON
    (13) declaration -> . type array_usage SEMICOLON
    (43) selection_statement -> . IF LPAREN expression RPAREN compound_statement
    (44) selection_statement -> . IF LPAREN expression RPAREN statement
    (45) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement
    (46) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE statement
    (47) selection_statement -> . IF LPAREN expression RPAREN statement ELSE compound_statement
    (48) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (49) return-statement -> . RETURN SEMICOLON
    (50) return-statement -> . RETURN expression SEMICOLON
    (70) type -> . BOOL
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . VOID
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET

    LBRACE          shift and go to state 105
    WHILE           shift and go to state 120
    DO              shift and go to state 121
    IF              shift and go to state 126
    RETURN          shift and go to state 127
    BOOL            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    VOID            shift and go to state 14
    IDENTIFIER      shift and go to state 128

    compound_statement             shift and go to state 130
    statement                      shift and go to state 131
    iteration_statement            shift and go to state 116
    declaration                    shift and go to state 117
    selection_statement            shift and go to state 118
    return-statement               shift and go to state 119
    type                           shift and go to state 122
    assignment                     shift and go to state 123
    function_call                  shift and go to state 124
    array_usage                    shift and go to state 125

state 122

    (9) declaration -> type . assignment SEMICOLON
    (13) declaration -> type . array_usage SEMICOLON
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET

    IDENTIFIER      shift and go to state 134

    assignment                     shift and go to state 132
    array_usage                    shift and go to state 133

state 123

    (10) declaration -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 135


state 124

    (11) declaration -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 136


state 125

    (12) declaration -> array_usage . SEMICOLON

    SEMICOLON       shift and go to state 137


state 126

    (43) selection_statement -> IF . LPAREN expression RPAREN compound_statement
    (44) selection_statement -> IF . LPAREN expression RPAREN statement
    (45) selection_statement -> IF . LPAREN expression RPAREN compound_statement ELSE compound_statement
    (46) selection_statement -> IF . LPAREN expression RPAREN compound_statement ELSE statement
    (47) selection_statement -> IF . LPAREN expression RPAREN statement ELSE compound_statement
    (48) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 138


state 127

    (49) return-statement -> RETURN . SEMICOLON
    (50) return-statement -> RETURN . expression SEMICOLON
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    SEMICOLON       shift and go to state 139
    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 140
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 128

    (14) assignment -> IDENTIFIER . EQUALS expression
    (15) assignment -> IDENTIFIER . PLUS EQUALS expression
    (16) assignment -> IDENTIFIER . MINUS EQUALS expression
    (17) function_call -> IDENTIFIER . LPAREN RPAREN
    (18) function_call -> IDENTIFIER . LPAREN expression RPAREN
    (19) function_call -> IDENTIFIER . LPAREN elements RPAREN
    (24) array_usage -> IDENTIFIER . LBRACKET elements RBRACKET
    (25) array_usage -> IDENTIFIER . LBRACKET expression RBRACKET

    EQUALS          shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    LPAREN          shift and go to state 58
    LBRACKET        shift and go to state 21


state 129

    (39) iteration_statement -> WHILE LPAREN . expression RPAREN compound_statement
    (40) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 141
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 130

    (41) iteration_statement -> DO compound_statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 142


state 131

    (42) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 143


state 132

    (9) declaration -> type assignment . SEMICOLON

    SEMICOLON       shift and go to state 144


state 133

    (13) declaration -> type array_usage . SEMICOLON

    SEMICOLON       shift and go to state 145


state 134

    (14) assignment -> IDENTIFIER . EQUALS expression
    (15) assignment -> IDENTIFIER . PLUS EQUALS expression
    (16) assignment -> IDENTIFIER . MINUS EQUALS expression
    (24) array_usage -> IDENTIFIER . LBRACKET elements RBRACKET
    (25) array_usage -> IDENTIFIER . LBRACKET expression RBRACKET

    EQUALS          shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    LBRACKET        shift and go to state 21


state 135

    (10) declaration -> assignment SEMICOLON .

    RBRACE          reduce using rule 10 (declaration -> assignment SEMICOLON .)
    WHILE           reduce using rule 10 (declaration -> assignment SEMICOLON .)
    DO              reduce using rule 10 (declaration -> assignment SEMICOLON .)
    IF              reduce using rule 10 (declaration -> assignment SEMICOLON .)
    RETURN          reduce using rule 10 (declaration -> assignment SEMICOLON .)
    BOOL            reduce using rule 10 (declaration -> assignment SEMICOLON .)
    INT             reduce using rule 10 (declaration -> assignment SEMICOLON .)
    FLOAT           reduce using rule 10 (declaration -> assignment SEMICOLON .)
    CHAR            reduce using rule 10 (declaration -> assignment SEMICOLON .)
    VOID            reduce using rule 10 (declaration -> assignment SEMICOLON .)
    IDENTIFIER      reduce using rule 10 (declaration -> assignment SEMICOLON .)
    ELSE            reduce using rule 10 (declaration -> assignment SEMICOLON .)


state 136

    (11) declaration -> function_call SEMICOLON .

    RBRACE          reduce using rule 11 (declaration -> function_call SEMICOLON .)
    WHILE           reduce using rule 11 (declaration -> function_call SEMICOLON .)
    DO              reduce using rule 11 (declaration -> function_call SEMICOLON .)
    IF              reduce using rule 11 (declaration -> function_call SEMICOLON .)
    RETURN          reduce using rule 11 (declaration -> function_call SEMICOLON .)
    BOOL            reduce using rule 11 (declaration -> function_call SEMICOLON .)
    INT             reduce using rule 11 (declaration -> function_call SEMICOLON .)
    FLOAT           reduce using rule 11 (declaration -> function_call SEMICOLON .)
    CHAR            reduce using rule 11 (declaration -> function_call SEMICOLON .)
    VOID            reduce using rule 11 (declaration -> function_call SEMICOLON .)
    IDENTIFIER      reduce using rule 11 (declaration -> function_call SEMICOLON .)
    ELSE            reduce using rule 11 (declaration -> function_call SEMICOLON .)


state 137

    (12) declaration -> array_usage SEMICOLON .

    RBRACE          reduce using rule 12 (declaration -> array_usage SEMICOLON .)
    WHILE           reduce using rule 12 (declaration -> array_usage SEMICOLON .)
    DO              reduce using rule 12 (declaration -> array_usage SEMICOLON .)
    IF              reduce using rule 12 (declaration -> array_usage SEMICOLON .)
    RETURN          reduce using rule 12 (declaration -> array_usage SEMICOLON .)
    BOOL            reduce using rule 12 (declaration -> array_usage SEMICOLON .)
    INT             reduce using rule 12 (declaration -> array_usage SEMICOLON .)
    FLOAT           reduce using rule 12 (declaration -> array_usage SEMICOLON .)
    CHAR            reduce using rule 12 (declaration -> array_usage SEMICOLON .)
    VOID            reduce using rule 12 (declaration -> array_usage SEMICOLON .)
    IDENTIFIER      reduce using rule 12 (declaration -> array_usage SEMICOLON .)
    ELSE            reduce using rule 12 (declaration -> array_usage SEMICOLON .)


state 138

    (43) selection_statement -> IF LPAREN . expression RPAREN compound_statement
    (44) selection_statement -> IF LPAREN . expression RPAREN statement
    (45) selection_statement -> IF LPAREN . expression RPAREN compound_statement ELSE compound_statement
    (46) selection_statement -> IF LPAREN . expression RPAREN compound_statement ELSE statement
    (47) selection_statement -> IF LPAREN . expression RPAREN statement ELSE compound_statement
    (48) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 146
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 139

    (49) return-statement -> RETURN SEMICOLON .

    RBRACE          reduce using rule 49 (return-statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 49 (return-statement -> RETURN SEMICOLON .)
    DO              reduce using rule 49 (return-statement -> RETURN SEMICOLON .)
    IF              reduce using rule 49 (return-statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 49 (return-statement -> RETURN SEMICOLON .)
    BOOL            reduce using rule 49 (return-statement -> RETURN SEMICOLON .)
    INT             reduce using rule 49 (return-statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 49 (return-statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 49 (return-statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 49 (return-statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 49 (return-statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 49 (return-statement -> RETURN SEMICOLON .)


state 140

    (50) return-statement -> RETURN expression . SEMICOLON
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    SEMICOLON       shift and go to state 147
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    MODULUS         shift and go to state 65
    ISEQUAL         shift and go to state 66
    NOT             shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71


state 141

    (39) iteration_statement -> WHILE LPAREN expression . RPAREN compound_statement
    (40) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    RPAREN          shift and go to state 148
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    MODULUS         shift and go to state 65
    ISEQUAL         shift and go to state 66
    NOT             shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71


state 142

    (41) iteration_statement -> DO compound_statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 149


state 143

    (42) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 150


state 144

    (9) declaration -> type assignment SEMICOLON .

    RBRACE          reduce using rule 9 (declaration -> type assignment SEMICOLON .)
    WHILE           reduce using rule 9 (declaration -> type assignment SEMICOLON .)
    DO              reduce using rule 9 (declaration -> type assignment SEMICOLON .)
    IF              reduce using rule 9 (declaration -> type assignment SEMICOLON .)
    RETURN          reduce using rule 9 (declaration -> type assignment SEMICOLON .)
    BOOL            reduce using rule 9 (declaration -> type assignment SEMICOLON .)
    INT             reduce using rule 9 (declaration -> type assignment SEMICOLON .)
    FLOAT           reduce using rule 9 (declaration -> type assignment SEMICOLON .)
    CHAR            reduce using rule 9 (declaration -> type assignment SEMICOLON .)
    VOID            reduce using rule 9 (declaration -> type assignment SEMICOLON .)
    IDENTIFIER      reduce using rule 9 (declaration -> type assignment SEMICOLON .)
    ELSE            reduce using rule 9 (declaration -> type assignment SEMICOLON .)


state 145

    (13) declaration -> type array_usage SEMICOLON .

    RBRACE          reduce using rule 13 (declaration -> type array_usage SEMICOLON .)
    WHILE           reduce using rule 13 (declaration -> type array_usage SEMICOLON .)
    DO              reduce using rule 13 (declaration -> type array_usage SEMICOLON .)
    IF              reduce using rule 13 (declaration -> type array_usage SEMICOLON .)
    RETURN          reduce using rule 13 (declaration -> type array_usage SEMICOLON .)
    BOOL            reduce using rule 13 (declaration -> type array_usage SEMICOLON .)
    INT             reduce using rule 13 (declaration -> type array_usage SEMICOLON .)
    FLOAT           reduce using rule 13 (declaration -> type array_usage SEMICOLON .)
    CHAR            reduce using rule 13 (declaration -> type array_usage SEMICOLON .)
    VOID            reduce using rule 13 (declaration -> type array_usage SEMICOLON .)
    IDENTIFIER      reduce using rule 13 (declaration -> type array_usage SEMICOLON .)
    ELSE            reduce using rule 13 (declaration -> type array_usage SEMICOLON .)


state 146

    (43) selection_statement -> IF LPAREN expression . RPAREN compound_statement
    (44) selection_statement -> IF LPAREN expression . RPAREN statement
    (45) selection_statement -> IF LPAREN expression . RPAREN compound_statement ELSE compound_statement
    (46) selection_statement -> IF LPAREN expression . RPAREN compound_statement ELSE statement
    (47) selection_statement -> IF LPAREN expression . RPAREN statement ELSE compound_statement
    (48) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    RPAREN          shift and go to state 151
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    MODULUS         shift and go to state 65
    ISEQUAL         shift and go to state 66
    NOT             shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71


state 147

    (50) return-statement -> RETURN expression SEMICOLON .

    RBRACE          reduce using rule 50 (return-statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 50 (return-statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 50 (return-statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 50 (return-statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 50 (return-statement -> RETURN expression SEMICOLON .)
    BOOL            reduce using rule 50 (return-statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 50 (return-statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 50 (return-statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 50 (return-statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 50 (return-statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 50 (return-statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 50 (return-statement -> RETURN expression SEMICOLON .)


state 148

    (39) iteration_statement -> WHILE LPAREN expression RPAREN . compound_statement
    (40) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (32) compound_statement -> . LBRACE statement_list RBRACE
    (35) statement -> . iteration_statement
    (36) statement -> . declaration
    (37) statement -> . selection_statement
    (38) statement -> . return-statement
    (39) iteration_statement -> . WHILE LPAREN expression RPAREN compound_statement
    (40) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (41) iteration_statement -> . DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON
    (42) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (9) declaration -> . type assignment SEMICOLON
    (10) declaration -> . assignment SEMICOLON
    (11) declaration -> . function_call SEMICOLON
    (12) declaration -> . array_usage SEMICOLON
    (13) declaration -> . type array_usage SEMICOLON
    (43) selection_statement -> . IF LPAREN expression RPAREN compound_statement
    (44) selection_statement -> . IF LPAREN expression RPAREN statement
    (45) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement
    (46) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE statement
    (47) selection_statement -> . IF LPAREN expression RPAREN statement ELSE compound_statement
    (48) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (49) return-statement -> . RETURN SEMICOLON
    (50) return-statement -> . RETURN expression SEMICOLON
    (70) type -> . BOOL
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . VOID
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET

    LBRACE          shift and go to state 105
    WHILE           shift and go to state 120
    DO              shift and go to state 121
    IF              shift and go to state 126
    RETURN          shift and go to state 127
    BOOL            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    VOID            shift and go to state 14
    IDENTIFIER      shift and go to state 128

    compound_statement             shift and go to state 152
    statement                      shift and go to state 153
    iteration_statement            shift and go to state 116
    declaration                    shift and go to state 117
    selection_statement            shift and go to state 118
    return-statement               shift and go to state 119
    type                           shift and go to state 122
    assignment                     shift and go to state 123
    function_call                  shift and go to state 124
    array_usage                    shift and go to state 125

state 149

    (41) iteration_statement -> DO compound_statement WHILE LPAREN . expression RPAREN SEMICOLON
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 154
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 150

    (42) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMICOLON
    (60) expression -> . BOOLEAN
    (61) expression -> . number
    (62) expression -> . STRING
    (63) expression -> . IDENTIFIER
    (64) expression -> . LETTER
    (65) expression -> . assignment
    (66) expression -> . array_usage
    (67) expression -> . function_call
    (68) expression -> . math_expression
    (69) expression -> . conditional_expression
    (22) number -> . INTEGER
    (23) number -> . FLOATINGPOINT
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (75) math_expression -> . expression PLUS expression
    (76) math_expression -> . expression MINUS expression
    (77) math_expression -> . expression TIMES expression
    (78) math_expression -> . expression DIVIDE expression
    (79) math_expression -> . expression MODULUS expression
    (80) math_expression -> . expression PLUS PLUS
    (81) math_expression -> . expression MINUS MINUS
    (51) conditional_expression -> . expression ISEQUAL expression
    (52) conditional_expression -> . expression NOT EQUALS expression
    (53) conditional_expression -> . expression LESS expression
    (54) conditional_expression -> . expression LESS EQUALS expression
    (55) conditional_expression -> . expression GREATER expression
    (56) conditional_expression -> . expression GREATER EQUALS expression
    (57) conditional_expression -> . expression AND expression
    (58) conditional_expression -> . expression OR expression
    (59) conditional_expression -> . NOT expression

    BOOLEAN         shift and go to state 35
    STRING          shift and go to state 37
    IDENTIFIER      shift and go to state 31
    LETTER          shift and go to state 38
    INTEGER         shift and go to state 44
    FLOATINGPOINT   shift and go to state 45
    NOT             shift and go to state 46

    expression                     shift and go to state 155
    number                         shift and go to state 36
    assignment                     shift and go to state 39
    array_usage                    shift and go to state 40
    function_call                  shift and go to state 41
    math_expression                shift and go to state 42
    conditional_expression         shift and go to state 43

state 151

    (43) selection_statement -> IF LPAREN expression RPAREN . compound_statement
    (44) selection_statement -> IF LPAREN expression RPAREN . statement
    (45) selection_statement -> IF LPAREN expression RPAREN . compound_statement ELSE compound_statement
    (46) selection_statement -> IF LPAREN expression RPAREN . compound_statement ELSE statement
    (47) selection_statement -> IF LPAREN expression RPAREN . statement ELSE compound_statement
    (48) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (32) compound_statement -> . LBRACE statement_list RBRACE
    (35) statement -> . iteration_statement
    (36) statement -> . declaration
    (37) statement -> . selection_statement
    (38) statement -> . return-statement
    (39) iteration_statement -> . WHILE LPAREN expression RPAREN compound_statement
    (40) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (41) iteration_statement -> . DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON
    (42) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (9) declaration -> . type assignment SEMICOLON
    (10) declaration -> . assignment SEMICOLON
    (11) declaration -> . function_call SEMICOLON
    (12) declaration -> . array_usage SEMICOLON
    (13) declaration -> . type array_usage SEMICOLON
    (43) selection_statement -> . IF LPAREN expression RPAREN compound_statement
    (44) selection_statement -> . IF LPAREN expression RPAREN statement
    (45) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement
    (46) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE statement
    (47) selection_statement -> . IF LPAREN expression RPAREN statement ELSE compound_statement
    (48) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (49) return-statement -> . RETURN SEMICOLON
    (50) return-statement -> . RETURN expression SEMICOLON
    (70) type -> . BOOL
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . VOID
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET

    LBRACE          shift and go to state 105
    WHILE           shift and go to state 120
    DO              shift and go to state 121
    IF              shift and go to state 126
    RETURN          shift and go to state 127
    BOOL            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    VOID            shift and go to state 14
    IDENTIFIER      shift and go to state 128

    compound_statement             shift and go to state 156
    statement                      shift and go to state 157
    iteration_statement            shift and go to state 116
    declaration                    shift and go to state 117
    selection_statement            shift and go to state 118
    return-statement               shift and go to state 119
    type                           shift and go to state 122
    assignment                     shift and go to state 123
    function_call                  shift and go to state 124
    array_usage                    shift and go to state 125

state 152

    (39) iteration_statement -> WHILE LPAREN expression RPAREN compound_statement .

    RBRACE          reduce using rule 39 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    WHILE           reduce using rule 39 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    DO              reduce using rule 39 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    IF              reduce using rule 39 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    RETURN          reduce using rule 39 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    BOOL            reduce using rule 39 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    INT             reduce using rule 39 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    FLOAT           reduce using rule 39 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    CHAR            reduce using rule 39 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    VOID            reduce using rule 39 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    IDENTIFIER      reduce using rule 39 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    ELSE            reduce using rule 39 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement .)


state 153

    (40) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 154

    (41) iteration_statement -> DO compound_statement WHILE LPAREN expression . RPAREN SEMICOLON
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    RPAREN          shift and go to state 158
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    MODULUS         shift and go to state 65
    ISEQUAL         shift and go to state 66
    NOT             shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71


state 155

    (42) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMICOLON
    (75) math_expression -> expression . PLUS expression
    (76) math_expression -> expression . MINUS expression
    (77) math_expression -> expression . TIMES expression
    (78) math_expression -> expression . DIVIDE expression
    (79) math_expression -> expression . MODULUS expression
    (80) math_expression -> expression . PLUS PLUS
    (81) math_expression -> expression . MINUS MINUS
    (51) conditional_expression -> expression . ISEQUAL expression
    (52) conditional_expression -> expression . NOT EQUALS expression
    (53) conditional_expression -> expression . LESS expression
    (54) conditional_expression -> expression . LESS EQUALS expression
    (55) conditional_expression -> expression . GREATER expression
    (56) conditional_expression -> expression . GREATER EQUALS expression
    (57) conditional_expression -> expression . AND expression
    (58) conditional_expression -> expression . OR expression

    RPAREN          shift and go to state 159
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    MODULUS         shift and go to state 65
    ISEQUAL         shift and go to state 66
    NOT             shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71


state 156

    (43) selection_statement -> IF LPAREN expression RPAREN compound_statement .
    (45) selection_statement -> IF LPAREN expression RPAREN compound_statement . ELSE compound_statement
    (46) selection_statement -> IF LPAREN expression RPAREN compound_statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 43 (selection_statement -> IF LPAREN expression RPAREN compound_statement .)
    WHILE           reduce using rule 43 (selection_statement -> IF LPAREN expression RPAREN compound_statement .)
    DO              reduce using rule 43 (selection_statement -> IF LPAREN expression RPAREN compound_statement .)
    IF              reduce using rule 43 (selection_statement -> IF LPAREN expression RPAREN compound_statement .)
    RETURN          reduce using rule 43 (selection_statement -> IF LPAREN expression RPAREN compound_statement .)
    BOOL            reduce using rule 43 (selection_statement -> IF LPAREN expression RPAREN compound_statement .)
    INT             reduce using rule 43 (selection_statement -> IF LPAREN expression RPAREN compound_statement .)
    FLOAT           reduce using rule 43 (selection_statement -> IF LPAREN expression RPAREN compound_statement .)
    CHAR            reduce using rule 43 (selection_statement -> IF LPAREN expression RPAREN compound_statement .)
    VOID            reduce using rule 43 (selection_statement -> IF LPAREN expression RPAREN compound_statement .)
    IDENTIFIER      reduce using rule 43 (selection_statement -> IF LPAREN expression RPAREN compound_statement .)
    ELSE            shift and go to state 160

  ! ELSE            [ reduce using rule 43 (selection_statement -> IF LPAREN expression RPAREN compound_statement .) ]


state 157

    (44) selection_statement -> IF LPAREN expression RPAREN statement .
    (47) selection_statement -> IF LPAREN expression RPAREN statement . ELSE compound_statement
    (48) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 44 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 44 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 44 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 44 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 44 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 44 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 44 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 44 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 44 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 44 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 44 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 161

  ! ELSE            [ reduce using rule 44 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 158

    (41) iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 162


state 159

    (42) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 163


state 160

    (45) selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE . compound_statement
    (46) selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE . statement
    (32) compound_statement -> . LBRACE statement_list RBRACE
    (35) statement -> . iteration_statement
    (36) statement -> . declaration
    (37) statement -> . selection_statement
    (38) statement -> . return-statement
    (39) iteration_statement -> . WHILE LPAREN expression RPAREN compound_statement
    (40) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (41) iteration_statement -> . DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON
    (42) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (9) declaration -> . type assignment SEMICOLON
    (10) declaration -> . assignment SEMICOLON
    (11) declaration -> . function_call SEMICOLON
    (12) declaration -> . array_usage SEMICOLON
    (13) declaration -> . type array_usage SEMICOLON
    (43) selection_statement -> . IF LPAREN expression RPAREN compound_statement
    (44) selection_statement -> . IF LPAREN expression RPAREN statement
    (45) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement
    (46) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE statement
    (47) selection_statement -> . IF LPAREN expression RPAREN statement ELSE compound_statement
    (48) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (49) return-statement -> . RETURN SEMICOLON
    (50) return-statement -> . RETURN expression SEMICOLON
    (70) type -> . BOOL
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . VOID
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET

    LBRACE          shift and go to state 105
    WHILE           shift and go to state 120
    DO              shift and go to state 121
    IF              shift and go to state 126
    RETURN          shift and go to state 127
    BOOL            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    VOID            shift and go to state 14
    IDENTIFIER      shift and go to state 128

    compound_statement             shift and go to state 164
    statement                      shift and go to state 165
    iteration_statement            shift and go to state 116
    declaration                    shift and go to state 117
    selection_statement            shift and go to state 118
    return-statement               shift and go to state 119
    type                           shift and go to state 122
    assignment                     shift and go to state 123
    function_call                  shift and go to state 124
    array_usage                    shift and go to state 125

state 161

    (47) selection_statement -> IF LPAREN expression RPAREN statement ELSE . compound_statement
    (48) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (32) compound_statement -> . LBRACE statement_list RBRACE
    (35) statement -> . iteration_statement
    (36) statement -> . declaration
    (37) statement -> . selection_statement
    (38) statement -> . return-statement
    (39) iteration_statement -> . WHILE LPAREN expression RPAREN compound_statement
    (40) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (41) iteration_statement -> . DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON
    (42) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (9) declaration -> . type assignment SEMICOLON
    (10) declaration -> . assignment SEMICOLON
    (11) declaration -> . function_call SEMICOLON
    (12) declaration -> . array_usage SEMICOLON
    (13) declaration -> . type array_usage SEMICOLON
    (43) selection_statement -> . IF LPAREN expression RPAREN compound_statement
    (44) selection_statement -> . IF LPAREN expression RPAREN statement
    (45) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement
    (46) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE statement
    (47) selection_statement -> . IF LPAREN expression RPAREN statement ELSE compound_statement
    (48) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (49) return-statement -> . RETURN SEMICOLON
    (50) return-statement -> . RETURN expression SEMICOLON
    (70) type -> . BOOL
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . VOID
    (14) assignment -> . IDENTIFIER EQUALS expression
    (15) assignment -> . IDENTIFIER PLUS EQUALS expression
    (16) assignment -> . IDENTIFIER MINUS EQUALS expression
    (17) function_call -> . IDENTIFIER LPAREN RPAREN
    (18) function_call -> . IDENTIFIER LPAREN expression RPAREN
    (19) function_call -> . IDENTIFIER LPAREN elements RPAREN
    (24) array_usage -> . IDENTIFIER LBRACKET elements RBRACKET
    (25) array_usage -> . IDENTIFIER LBRACKET expression RBRACKET

    LBRACE          shift and go to state 105
    WHILE           shift and go to state 120
    DO              shift and go to state 121
    IF              shift and go to state 126
    RETURN          shift and go to state 127
    BOOL            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    VOID            shift and go to state 14
    IDENTIFIER      shift and go to state 128

    statement                      shift and go to state 166
    compound_statement             shift and go to state 167
    iteration_statement            shift and go to state 116
    declaration                    shift and go to state 117
    selection_statement            shift and go to state 118
    return-statement               shift and go to state 119
    type                           shift and go to state 122
    assignment                     shift and go to state 123
    function_call                  shift and go to state 124
    array_usage                    shift and go to state 125

state 162

    (41) iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 41 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 41 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 41 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 41 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 41 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BOOL            reduce using rule 41 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 41 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 41 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 41 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VOID            reduce using rule 41 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 41 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 41 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)


state 163

    (42) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BOOL            reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VOID            reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)


state 164

    (45) selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .

    RBRACE          reduce using rule 45 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    WHILE           reduce using rule 45 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    DO              reduce using rule 45 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    IF              reduce using rule 45 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    RETURN          reduce using rule 45 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    BOOL            reduce using rule 45 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    INT             reduce using rule 45 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    FLOAT           reduce using rule 45 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    CHAR            reduce using rule 45 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    VOID            reduce using rule 45 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    IDENTIFIER      reduce using rule 45 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    ELSE            reduce using rule 45 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)


state 165

    (46) selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE statement .

    RBRACE          reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE statement .)
    WHILE           reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE statement .)
    DO              reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE statement .)
    IF              reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE statement .)
    RETURN          reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE statement .)
    BOOL            reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE statement .)
    INT             reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE statement .)
    FLOAT           reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE statement .)
    CHAR            reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE statement .)
    VOID            reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE statement .)
    IDENTIFIER      reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE statement .)
    ELSE            reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE statement .)


state 166

    (48) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 48 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 48 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 48 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 48 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 48 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BOOL            reduce using rule 48 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 48 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 48 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 48 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 48 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 48 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 48 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 167

    (47) selection_statement -> IF LPAREN expression RPAREN statement ELSE compound_statement .

    RBRACE          reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE compound_statement .)
    WHILE           reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE compound_statement .)
    DO              reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE compound_statement .)
    IF              reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE compound_statement .)
    RETURN          reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE compound_statement .)
    BOOL            reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE compound_statement .)
    INT             reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE compound_statement .)
    FLOAT           reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE compound_statement .)
    CHAR            reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE compound_statement .)
    VOID            reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE compound_statement .)
    IDENTIFIER      reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE compound_statement .)
    ELSE            reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE compound_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 31 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 31 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 73 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 73 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 73 resolved as shift
WARNING: shift/reduce conflict for ISEQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for NOT in state 73 resolved as shift
WARNING: shift/reduce conflict for LESS in state 73 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 73 resolved as shift
WARNING: shift/reduce conflict for AND in state 73 resolved as shift
WARNING: shift/reduce conflict for OR in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 92 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 92 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 92 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 92 resolved as shift
WARNING: shift/reduce conflict for ISEQUAL in state 92 resolved as shift
WARNING: shift/reduce conflict for NOT in state 92 resolved as shift
WARNING: shift/reduce conflict for LESS in state 92 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 92 resolved as shift
WARNING: shift/reduce conflict for AND in state 92 resolved as shift
WARNING: shift/reduce conflict for OR in state 92 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 156 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 157 resolved as shift
